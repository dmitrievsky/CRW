/******************************************************************************/
/*                 Generated by IBExpert 09.11.2011 11:57:26                  */
/******************************************************************************/

/******************************************************************************/
/*        Following SET SQL DIALECT is just for the Database Comparer         */
/******************************************************************************/
SET SQL DIALECT 3;



/******************************************************************************/
/*                                 Generators                                 */
/******************************************************************************/

CREATE GENERATOR CRW_GEN;
CREATE GENERATOR CRW_GEN_EMP;
CREATE GENERATOR IBE$VERSION_HISTORY_ID_GEN;
CREATE GENERATOR MSG_GEN;


/******************************************************************************/
/*                                 Exceptions                                 */
/******************************************************************************/

CREATE EXCEPTION RAISE 'ERROR';



SET TERM ^ ; 



/******************************************************************************/
/*                             Stored Procedures                              */
/******************************************************************************/

CREATE PROCEDURE CRW_EV_CERT_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    CERT_ID INTEGER,
    CERT_NUMBER VARCHAR(25),
    ISSUER_ID INTEGER,
    ISSUED_DATE TIMESTAMP,
    EXPIRED_DATE TIMESTAMP,
    VIEW_TITLE VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_CERT_LIST (
    ID_ INTEGER,
    EMP_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    CERT VARCHAR(50),
    CERT_NUMBER VARCHAR(25),
    ISSUER VARCHAR(50),
    ISSUED_DATE TIMESTAMP,
    EXPIRED_DATE TIMESTAMP)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_CERT_NEW (
    EMP_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    CERT_ID INTEGER,
    CERT_NUMBER VARCHAR(25),
    ISSUER_ID INTEGER,
    ISSUER VARCHAR(50),
    ISSUED_DATE TIMESTAMP,
    EXPIRED_DATE TIMESTAMP,
    VIEW_TITLE VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_CERT_U (
    ACT INTEGER,
    ID INTEGER,
    EMP_ID INTEGER,
    CERT_ID INTEGER,
    CERT_NUMBER VARCHAR(25),
    ISSUER_ID INTEGER,
    ISSUED_DATE TIMESTAMP,
    EXPIRED_DATE TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_CHILD_DEL (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_CHILD_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    DATE_BORN DATE,
    SEX VARCHAR(6))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_CHILD_LIST (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    EMP VARCHAR(50),
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    DATE_BORN DATE,
    SEX VARCHAR(6))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_CHILD_NEW
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    DATE_BORN DATE,
    SEX VARCHAR(6))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_CHILD_U (
    ACT INTEGER,
    ID INTEGER,
    EMP_ID INTEGER,
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    DATE_BORN DATE,
    SEX VARCHAR(6))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_COMPANY_DEL (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_COMPANY_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_COMPANY_LIST (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_COMPANY_NEW
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_COMPANY_U (
    ACT INTEGER,
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_DOC_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    NUMBER VARCHAR(25),
    GRADE_ID INTEGER,
    ISSUER_ID INTEGER,
    ISSUED_DATE TIMESTAMP,
    ENDOR_ISSUER_ID INTEGER,
    ENDOR_ISSUED_DATE TIMESTAMP,
    ENDOR_EXPIRED_DATE TIMESTAMP,
    VIEW_TITLE VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_DOC_LIST (
    ID_ INTEGER,
    EMP_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    NUMBER VARCHAR(25),
    GRADE VARCHAR(50),
    ISSUER VARCHAR(50),
    ISSUED_DATE TIMESTAMP,
    ENDOR_ISSUER VARCHAR(50),
    ENDOR_ISSUED_DATE TIMESTAMP,
    ENDOR_EXPIRED_DATE TIMESTAMP)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_DOC_NEW (
    EMP_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    NUMBER VARCHAR(25),
    GRADE_ID INTEGER,
    ISSUER_ID INTEGER,
    ISSUED_DATE TIMESTAMP,
    ENDOR_ISSUER_ID INTEGER,
    ENDOR_ISSUED_DATE TIMESTAMP,
    ENDOR_EXPIRED_DATE TIMESTAMP,
    VIEW_TITLE VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_DOC_U (
    ACT INTEGER,
    ID INTEGER,
    EMP_ID INTEGER,
    NUMBER VARCHAR(25),
    GRADE_ID INTEGER,
    ISSUER_ID INTEGER,
    ISSUED_DATE TIMESTAMP,
    ENDOR_ISSUER_ID INTEGER,
    ENDOR_ISSUED_DATE TIMESTAMP,
    ENDOR_EXPIRED_DATE TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_EMP_CHANGE_STATUS (
    EMP_ID_ INTEGER,
    STATUS_ INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_EMP_DEL (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_EMP_EXPER_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    POST_ID INTEGER,
    VESSEL_ID INTEGER,
    VESSEL VARCHAR(50),
    FROM_DATE DATE,
    TO_DATE DATE,
    NOTE VARCHAR(100),
    VIEW_TITLE VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_EMP_EXPER_LIST (
    ID_ INTEGER,
    EMP_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    POST VARCHAR(50),
    VESSEL VARCHAR(50),
    FROM_DATE DATE,
    TO_DATE DATE,
    NOTE VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_EMP_EXPER_NEW (
    EMP_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    POST_ID INTEGER,
    VESSEL_ID INTEGER,
    VESSEL VARCHAR(50),
    FROM_DATE DATE,
    TO_DATE DATE,
    NOTE VARCHAR(100),
    VIEW_TITLE VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_EMP_EXPER_U (
    ACT INTEGER,
    ID INTEGER,
    EMP_ID INTEGER,
    POST_ID INTEGER,
    VESSEL_ID INTEGER,
    FROM_DATE DATE,
    TO_DATE DATE,
    NOTE VARCHAR(100))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_EMP_FREEDATE (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    FREE_DATE DATE,
    FREE_DATE_NOTE VARCHAR(250),
    VIEW_TITLE VARCHAR(250))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_EMP_FREEDATE_U (
    ID_ INTEGER,
    FREE_DATE DATE,
    FREE_DATE_NOTE VARCHAR(250))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_EMP_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    CODE INTEGER,
    POST_ID INTEGER,
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    PHOTO BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    EDUCATION VARCHAR(250),
    POST_ALT_ID INTEGER,
    SALARY FLOAT,
    FATHERS_NAME VARCHAR(25),
    MOTHERS_NAME VARCHAR(25),
    DATE_BORN DATE,
    COUNTRY_BORN_ID INTEGER,
    CITY_BORN VARCHAR(50),
    CITIZEN_ID INTEGER,
    ADDR_COUNTRY_ID INTEGER,
    ADDR_CITY VARCHAR(50),
    ADDR_STREET VARCHAR(50),
    ADDR_NOTE VARCHAR(50),
    PHONE VARCHAR(25),
    RELIGION VARCHAR(25),
    MARITAL VARCHAR(25),
    NOKIN VARCHAR(25),
    NOKIN_NAME VARCHAR(50),
    NOKIN_ADDR VARCHAR(50),
    NOKIN_PHONES VARCHAR(50),
    COLOR_HAIR VARCHAR(25),
    COLOR_EYES VARCHAR(25),
    HIGHT FLOAT,
    WEIGHT FLOAT,
    SHOES FLOAT,
    CLOTHES FLOAT)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_EMP_LIST (
    ID_ INTEGER,
    EXPER_POST_ID_ INTEGER,
    FREE_DATE_ DATE)
RETURNS (
    ID INTEGER,
    POST VARCHAR(25),
    POST_ALT VARCHAR(25),
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    AGE INTEGER,
    PHONE VARCHAR(25),
    EXPER VARCHAR(255),
    FATHERS_NAME VARCHAR(25),
    MOTHERS_NAME VARCHAR(25),
    FREE_DATE DATE,
    FREE_DATE_NOTE VARCHAR(250))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_EMP_LIST_ARC (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    POST VARCHAR(25),
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    AGE INTEGER,
    PHONE VARCHAR(25),
    EXPER VARCHAR(255))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_EMP_LIST_NEW (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    POST VARCHAR(25),
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    AGE INTEGER,
    PHONE VARCHAR(25))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_EMP_NEW
RETURNS (
    ID INTEGER,
    CODE VARCHAR(25),
    POST_ID INTEGER,
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    PHOTO BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    EDUCATION VARCHAR(250),
    POST_ALT_ID INTEGER,
    SALARY FLOAT,
    FATHERS_NAME VARCHAR(25),
    MOTHERS_NAME VARCHAR(25),
    DATE_BORN DATE,
    COUNTRY_BORN_ID INTEGER,
    CITY_BORN VARCHAR(25),
    CITIZEN_ID INTEGER,
    ADDR_COUNTRY_ID INTEGER,
    ADDR_CITY VARCHAR(25),
    ADDR_STREET VARCHAR(50),
    ADDR_NOTE VARCHAR(50),
    PHONE VARCHAR(25),
    RELIGION VARCHAR(25),
    MARITAL VARCHAR(25),
    NOKIN VARCHAR(25),
    NOKIN_NAME VARCHAR(50),
    NOKIN_ADDR VARCHAR(50),
    NOKIN_PHONES VARCHAR(50),
    COLOR_HAIR VARCHAR(25),
    COLOR_EYES VARCHAR(25),
    HIGHT FLOAT,
    WEIGHT FLOAT,
    SHOES FLOAT,
    CLOTHES FLOAT)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_EMP_SELECTOR (
    EXPER_POST_ID_ INTEGER,
    FREE_DATE_ DATE)
RETURNS (
    EXPER_POST_ID INTEGER,
    FREE_DATE DATE,
    INFO VARCHAR(250))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_EMP_TESTS (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    COMPUTER VARCHAR(25),
    VIEW_TITLE VARCHAR(250))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_EMP_TESTS_U (
    ID_ INTEGER,
    COMPUTER VARCHAR(25))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_EMP_U (
    ACT INTEGER,
    ID INTEGER,
    POST_ID INTEGER,
    POST_ALT_ID INTEGER,
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    PHOTO BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    PHOTO_DEL INTEGER,
    FATHERS_NAME VARCHAR(25),
    MOTHERS_NAME VARCHAR(25),
    DATE_BORN DATE,
    COUNTRY_BORN_ID INTEGER,
    CITY_BORN VARCHAR(50),
    CITIZEN_ID INTEGER,
    ADDR_COUNTRY_ID INTEGER,
    ADDR_CITY VARCHAR(50),
    ADDR_STREET VARCHAR(50),
    ADDR_NOTE VARCHAR(50),
    PHONE VARCHAR(25),
    RELIGION VARCHAR(25),
    MARITAL VARCHAR(25),
    NOKIN VARCHAR(25),
    NOKIN_NAME VARCHAR(50),
    NOKIN_ADDR VARCHAR(50),
    NOKIN_PHONES VARCHAR(50),
    COLOR_HAIR VARCHAR(25),
    COLOR_EYES VARCHAR(25),
    HIGHT FLOAT,
    WEIGHT FLOAT,
    SHOES FLOAT,
    CLOTHES FLOAT,
    EDUCATION VARCHAR(250),
    SALARY FLOAT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_ENGINE_DEL (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_ENGINE_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_ENGINE_LIST (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_ENGINE_NEW
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_ENGINE_U (
    ACT INTEGER,
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_OPERATOR_DEL (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_OPERATOR_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_OPERATOR_LIST (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_OPERATOR_NEW
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_OPERATOR_U (
    ACT INTEGER,
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_VESSEL_DEL (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_VESSEL_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    VESSEL_TYPE_ID INTEGER,
    VESSEL_TYPE_NAME VARCHAR(50),
    DWT DOUBLE PRECISION,
    COMPANY_ID INTEGER,
    ENGINE_ID INTEGER,
    ENGINE_KIND VARCHAR(15),
    HP_MAIN DOUBLE PRECISION,
    ENGINE_AUX VARCHAR(15),
    HP_AUX DOUBLE PRECISION,
    GENERATORS DOUBLE PRECISION,
    FLAG_ID INTEGER,
    OURS SMALLINT,
    OPERATOR_ID INTEGER,
    CARGO_GEAR VARCHAR(10),
    LOAD DOUBLE PRECISION,
    SPEED DOUBLE PRECISION,
    AUTOMATION_CLASS VARCHAR(4),
    CRANE_TYPE VARCHAR(10),
    GMDSS SMALLINT,
    ARPA SMALLINT,
    GPS SMALLINT,
    ECDIS SMALLINT,
    FUEL_TYPE VARCHAR(8),
    LENGHT INTEGER,
    BEAM INTEGER,
    DRAUGHT INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_VESSEL_LIST (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    VESSEL_TYPE VARCHAR(50),
    DWT DOUBLE PRECISION,
    COMPANY VARCHAR(50),
    ENGINE VARCHAR(50),
    ENGINE_KIND VARCHAR(15),
    HP_MAIN DOUBLE PRECISION,
    ENGINE_AUX VARCHAR(15),
    HP_AUX DOUBLE PRECISION,
    GENERATORS DOUBLE PRECISION,
    FLAG VARCHAR(4),
    OURS SMALLINT,
    OPERATOR VARCHAR(50),
    CARGO_GEAR VARCHAR(10),
    LOAD DOUBLE PRECISION,
    SPEED DOUBLE PRECISION,
    AUTOMATION_CLASS VARCHAR(4),
    CRANE_TYPE VARCHAR(10),
    GMDSS SMALLINT,
    ARPA SMALLINT,
    GPS SMALLINT,
    ECDIS SMALLINT,
    FUEL_TYPE VARCHAR(8),
    LENGHT INTEGER,
    BEAM INTEGER,
    DRAUGHT INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_VESSEL_NEW
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_VESSEL_U (
    ACT INTEGER,
    ID INTEGER,
    NAME VARCHAR(50),
    VESSEL_TYPE_ID INTEGER,
    DWT DOUBLE PRECISION,
    COMPANY_ID INTEGER,
    ENGINE_ID INTEGER,
    ENGINE_KIND VARCHAR(15),
    HP_MAIN DOUBLE PRECISION,
    ENGINE_AUX VARCHAR(15),
    HP_AUX DOUBLE PRECISION,
    GENERATORS DOUBLE PRECISION,
    FLAG_ID INTEGER,
    OURS SMALLINT,
    OPERATOR_ID INTEGER,
    CARGO_GEAR VARCHAR(10),
    LOAD DOUBLE PRECISION,
    SPEED DOUBLE PRECISION,
    AUTOMATION_CLASS VARCHAR(4),
    CRANE_TYPE VARCHAR(10),
    GMDSS SMALLINT,
    ARPA SMALLINT,
    GPS SMALLINT,
    ECDIS SMALLINT,
    FUEL_TYPE VARCHAR(8),
    LENGHT INTEGER,
    BEAM INTEGER,
    DRAUGHT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_VESSELTYPE_DEL (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CRW_EV_VESSELTYPE_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_VESSELTYPE_LIST (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_VESSELTYPE_NEW
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE CRW_EV_VESSELTYPE_U (
    ACT INTEGER,
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ENTC_EV_UI_LIST
RETURNS (
    URI VARCHAR(50),
    UICLASS VARCHAR(50),
    ENTITYNAME VARCHAR(50),
    VIEWNAME VARCHAR(50),
    TITLE VARCHAR(50),
    GRP VARCHAR(50),
    OPTIONS VARCHAR(1024),
    PARAMS VARCHAR(1024),
    OUTS VARCHAR(1024),
    CATEGORY VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE INF_EV_SETTING_CHECK (
    NAME_ VARCHAR(50),
    USERNAME_ VARCHAR(50))
RETURNS (
    COMMON_EXISTS INTEGER,
    USER_EXISTS INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE INF_EV_SETTING_GET (
    NAME_ VARCHAR(50),
    USERNAME_ VARCHAR(50))
RETURNS (
    VALI INTEGER,
    VALS VARCHAR(250),
    VALN DOUBLE PRECISION,
    VALD DATE)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE INF_EV_SETTING_SET (
    NAME_ VARCHAR(50),
    USERNAME_ VARCHAR(50),
    VALI_ INTEGER,
    VALS_ VARCHAR(250),
    VALN_ DOUBLE PRECISION,
    VALD_ DATE)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE INF_SP_ENUM_GET (
    TABLENAME_ VARCHAR(50),
    FIELDNAME_ VARCHAR(50),
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    CODE VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE INF_SP_ENUM_LOOKUP (
    TABLENAME_ VARCHAR(50),
    FIELDNAME_ VARCHAR(50),
    SHOWNONE_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE INF_SP_SETTING (
    NAME_ VARCHAR(50))
RETURNS (
    VALI INTEGER,
    VALS VARCHAR(250),
    VALN DOUBLE PRECISION,
    VALD DATE)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE INF_SP_SETTING_ (
    NAME_ VARCHAR(50))
RETURNS (
    VALI INTEGER,
    VALS VARCHAR(250),
    VALN DOUBLE PRECISION,
    VALD DATE)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE INF_SP_SETTING2 (
    NAME_ VARCHAR(50))
RETURNS (
    VALI INTEGER,
    VALS VARCHAR(250),
    VALN DOUBLE PRECISION,
    VALD DATE)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE MSG_SP_BOX_POP (
    FROM_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    SDAT DATE,
    SENDER VARCHAR(38),
    TOPIC VARCHAR(50),
    TXT VARCHAR(250))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE MSG_SP_BOX_PUSH (
    RECEIVER_ VARCHAR(38),
    TOPIC_ VARCHAR(50),
    TXT_ VARCHAR(250))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OLD_IMPORT_ALL (
    MODE INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OLD_IMPORT_CERTS
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OLD_IMPORT_DOCS
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OLD_IMPORT_EXPER
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SEC_EO_PERM_STATE_GET (
    PERMID VARCHAR(38),
    USERID VARCHAR(38),
    RESID VARCHAR(38))
RETURNS (
    STATE INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SEC_EO_PERM_STATE_SET (
    PERMID VARCHAR(38),
    USERID VARCHAR(38),
    RESID VARCHAR(38),
    STATE INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SEC_EO_POLICY_RESET (
    POLID_ VARCHAR(38))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SEC_EO_POLICY_STATE_GET (
    POLID VARCHAR(38))
RETURNS (
    STATE INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SEC_EO_POLICY_STATE_SET (
    POLID VARCHAR(38),
    STATE INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SEC_EV_PERM_EFFECTIVE (
    POLID_ VARCHAR(38),
    PERMID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    USERID VARCHAR(38),
    USERNAME VARCHAR(50),
    PERM VARCHAR(50),
    STATE INTEGER,
    INHERITBY_PERM VARCHAR(50),
    INHERITBY_RESID VARCHAR(38))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SEC_EV_PERM_EFFECTIVE_ (
    PERMID_ VARCHAR(38),
    USERID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    STATE INTEGER,
    PERMID VARCHAR(38),
    RESID VARCHAR(38))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SEC_EV_PERM_LIST (
    POLID VARCHAR(38))
RETURNS (
    PERMID VARCHAR(38),
    NAME VARCHAR(50),
    DESCRIPTION VARCHAR(250),
    INHERITBY VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SEC_EV_POLICY_LIST (
    PARENTID VARCHAR(38))
RETURNS (
    POLID VARCHAR(38),
    NAME VARCHAR(50),
    RES_PROVID VARCHAR(38))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SEC_SP_PERM_CHECK (
    PERMID_ VARCHAR(38),
    USERID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    STATE INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SEC_SP_PERM_DEMAND (
    PERMID_ VARCHAR(38),
    RESID_ VARCHAR(38))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SEC_SP_PERM_DEMAND_USERS (
    PERMID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    USERID VARCHAR(38))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SEC_SP_PERM_DEMAND2 (
    PERMID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    STATE INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE UTL_SP_STRING_LEN (
    STRG_IN VARCHAR(32765))
RETURNS (
    STRG_LEN SMALLINT)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE UTL_SP_STRING_REPLACE (
    STR_IN VARCHAR(1024),
    STR_SEARCH VARCHAR(1024),
    STR_REPLACE VARCHAR(1024))
RETURNS (
    STR_OUT VARCHAR(1024))
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE UTL_SP_STRING_SUB (
    STR_IN VARCHAR(32765),
    STR_BEG SMALLINT,
    STR_LEN SMALLINT)
RETURNS (
    STR_OUT VARCHAR(32765))
AS
BEGIN
  SUSPEND;
END^



SET TERM ; ^



/******************************************************************************/
/*                                   Tables                                   */
/******************************************************************************/



CREATE TABLE CRW_CERT_TYPES (
    ID      INTEGER NOT NULL,
    NAME    VARCHAR(50),
    KIND    VARCHAR(50),
    PERIOD  FLOAT,
    BRIEF   VARCHAR(25)
);

CREATE TABLE CRW_CERTS (
    ID            INTEGER NOT NULL,
    EMP_ID        INTEGER NOT NULL,
    CERT_ID       INTEGER NOT NULL,
    CERT_NUMBER   VARCHAR(25),
    ISSUER_ID     INTEGER,
    ISSUED_DATE   TIMESTAMP,
    EXPIRED_DATE  TIMESTAMP
);

CREATE TABLE CRW_CHILDS (
    ID         INTEGER NOT NULL,
    EMP_ID     INTEGER NOT NULL,
    SURNAME    VARCHAR(25),
    NAME       VARCHAR(25),
    DATE_BORN  DATE,
    SEX        VARCHAR(6)
);

CREATE TABLE CRW_COMPANIES (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50) NOT NULL
);

CREATE TABLE CRW_COUNTRIES (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50) NOT NULL,
    FLAG  VARCHAR(4)
);

CREATE TABLE CRW_DOCS (
    ID                  INTEGER NOT NULL,
    EMP_ID              INTEGER NOT NULL,
    NUMBER              VARCHAR(25),
    GRADE_ID            INTEGER,
    ISSUER_ID           INTEGER,
    ISSUED_DATE         TIMESTAMP,
    ENDOR_ISSUER_ID     INTEGER,
    ENDOR_ISSUED_DATE   TIMESTAMP,
    ENDOR_EXPIRED_DATE  TIMESTAMP
);

CREATE TABLE CRW_EMP (
    ID               INTEGER NOT NULL,
    STATUS           INTEGER NOT NULL,
    POST_ID          INTEGER,
    POST_ALT_ID      INTEGER,
    SURNAME          VARCHAR(25),
    NAME             VARCHAR(25),
    FATHERS_NAME     VARCHAR(25),
    MOTHERS_NAME     VARCHAR(25),
    DATE_BORN        DATE,
    COUNTRY_BORN_ID  INTEGER,
    CITY_BORN        VARCHAR(50),
    CITIZEN_ID       INTEGER,
    RELIGION         VARCHAR(25),
    ADDR_COUNTRY_ID  INTEGER,
    ADDR_CITY        VARCHAR(50),
    ADDR_STREET      VARCHAR(100),
    ADDR_NOTE        VARCHAR(50),
    PHONE            VARCHAR(25),
    PHOTO            BLOB SUB_TYPE 1 SEGMENT SIZE 16384,
    STATUS_D1        TIMESTAMP,
    STATUS_D2        TIMESTAMP,
    MARITAL          VARCHAR(25),
    NOKIN            VARCHAR(25),
    NOKIN_NAME       VARCHAR(50),
    NOKIN_ADDR       VARCHAR(50),
    NOKIN_PHONES     VARCHAR(50),
    COLOR_HAIR       VARCHAR(25),
    COLOR_EYES       VARCHAR(25),
    HIGHT            FLOAT,
    WEIGHT           FLOAT,
    SHOES            FLOAT,
    CLOTHES          FLOAT,
    EDUCATION        VARCHAR(250),
    SALARY           FLOAT,
    FREE_DATE        DATE,
    FREE_DATE_NOTE   VARCHAR(250),
    COMPUTER         VARCHAR(25)
);

CREATE TABLE CRW_ENGINES (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50) NOT NULL
);

CREATE TABLE CRW_EXPER (
    ID              INTEGER NOT NULL,
    EMP_ID          INTEGER NOT NULL,
    POST_ID         INTEGER,
    VESSEL_ID       INTEGER,
    VESSEL          VARCHAR(50),
    VESSEL_TYPE_ID  INTEGER,
    COMPANY_ID      INTEGER,
    FROM_DATE       DATE,
    TO_DATE         DATE,
    NOTE            VARCHAR(50)
);

CREATE TABLE CRW_GRADES (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50) NOT NULL
);

CREATE TABLE CRW_ISSUERS (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50) NOT NULL
);

CREATE TABLE CRW_OPERATORS (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50) NOT NULL
);

CREATE TABLE CRW_POSTS (
    ID             INTEGER NOT NULL,
    NAME           VARCHAR(25),
    FULLNAME       VARCHAR(50),
    COMMAND        INTEGER DEFAULT 0 NOT NULL,
    COMMANDJUNIOR  SMALLINT DEFAULT 0 NOT NULL
);

CREATE TABLE CRW_TESTS (
    CODE  VARCHAR(10) NOT NULL,
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50)
);

CREATE TABLE CRW_VESSEL_TYPES (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50) NOT NULL
);

CREATE TABLE CRW_VESSELS (
    ID                INTEGER NOT NULL,
    NAME              VARCHAR(50),
    VESSEL_TYPE_ID    INTEGER,
    DWT               DOUBLE PRECISION,
    COMPANY_ID        INTEGER,
    ENGINE_ID         INTEGER,
    ENGINE_KIND       VARCHAR(15),
    HP_MAIN           DOUBLE PRECISION,
    ENGINE_AUX        VARCHAR(15),
    HP_AUX            DOUBLE PRECISION,
    GENERATORS        DOUBLE PRECISION,
    FLAG_ID           INTEGER,
    OURS              SMALLINT,
    OPERATOR_ID       INTEGER,
    CARGO_GEAR        VARCHAR(10),
    LOAD              DOUBLE PRECISION,
    SPEED             DOUBLE PRECISION,
    AUTOMATION_CLASS  VARCHAR(4),
    CRANE_TYPE        VARCHAR(10),
    GMDSS             SMALLINT,
    ARPA              SMALLINT,
    GPS               SMALLINT,
    ECDIS             SMALLINT,
    FUEL_TYPE         VARCHAR(8),
    LENGHT            INTEGER,
    BEAM              INTEGER,
    DRAUGHT           INTEGER
);

CREATE TABLE DUMMY (
    DUMMY  INTEGER NOT NULL
);

CREATE TABLE ENT_ENTITIES (
    ENTITYNAME   VARCHAR(38) NOT NULL,
    SCHEMENAME   VARCHAR(38),
    IS_SCHEME    INTEGER DEFAULT 0 NOT NULL,
    DESCRIPTION  VARCHAR(250)
);

CREATE TABLE ENT_FIELDS (
    ENTITYNAME      VARCHAR(38) NOT NULL,
    VIEWNAME        VARCHAR(38) NOT NULL,
    FIELDNAME       VARCHAR(38) NOT NULL,
    BAND            VARCHAR(50),
    TITLE           VARCHAR(50),
    VISIBLE         INTEGER DEFAULT 1 NOT NULL,
    READONLY        INTEGER DEFAULT 0 NOT NULL,
    EDITOR          VARCHAR(50),
    EDITOR_OPTIONS  VARCHAR(1024),
    OPTIONS         VARCHAR(1024),
    REQ             INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE ENT_OPERS (
    ENTITYNAME  VARCHAR(38) NOT NULL,
    OPERNAME    VARCHAR(38) NOT NULL,
    SQL_TEXT    VARCHAR(1024),
    IS_SELECT   INTEGER DEFAULT 0,
    OPTIONS     VARCHAR(1024)
);

CREATE TABLE ENT_VIEW_LINKS (
    ENTITYNAME         VARCHAR(38) NOT NULL,
    VIEWNAME           VARCHAR(38) NOT NULL,
    LINKED_ENTITYNAME  VARCHAR(38) NOT NULL,
    LINKED_VIEWNAME    VARCHAR(38) NOT NULL,
    LINK_KIND          INTEGER DEFAULT 1 NOT NULL,
    LINKED_FIELD       VARCHAR(38)
);

CREATE TABLE ENT_VIEWS (
    ENTITYNAME     VARCHAR(38) NOT NULL,
    VIEWNAME       VARCHAR(38) NOT NULL,
    SQL_SELECT     VARCHAR(1024),
    SQL_INSERT     VARCHAR(1024),
    SQL_UPDATE     VARCHAR(1024),
    SQL_DELETE     VARCHAR(1024),
    SQL_REFRESH    VARCHAR(1024),
    READONLY       INTEGER DEFAULT 1 NOT NULL,
    PKEY           VARCHAR(38),
    OPTIONS        VARCHAR(1024),
    IS_EXEC        INTEGER DEFAULT 0 NOT NULL,
    SQL_INSERTDEF  VARCHAR(1024)
);

CREATE TABLE ENTC_CMD (
    URI           VARCHAR(50) NOT NULL,
    CMD           VARCHAR(50) NOT NULL,
    CAPTION       VARCHAR(50) NOT NULL,
    IDX           INTEGER DEFAULT 0 NOT NULL,
    GRP           VARCHAR(50),
    DEF           INTEGER DEFAULT 0 NOT NULL,
    HANDLER_KIND  INTEGER NOT NULL,
    HANDLER       VARCHAR(50),
    CMD_DATA      VARCHAR(1024),
    OPTIONS       VARCHAR(1024)
);

CREATE TABLE ENTC_GRP (
    GRP  VARCHAR(50) NOT NULL,
    IDX  INTEGER
);

CREATE TABLE ENTC_UI (
    URI         VARCHAR(50) NOT NULL,
    UICLASS     VARCHAR(50) NOT NULL,
    ENTITYNAME  VARCHAR(50) NOT NULL,
    VIEWNAME    VARCHAR(50),
    TITLE       VARCHAR(50) NOT NULL,
    GRP         VARCHAR(50),
    OPTIONS     VARCHAR(1024),
    IDX         INTEGER,
    PARAMS      VARCHAR(1024),
    OUTS        VARCHAR(50),
    CATEGORY    VARCHAR(50)
);

CREATE TABLE ENTC_UICLASS (
    UICLASS      VARCHAR(50) NOT NULL,
    VIEWNAME     VARCHAR(50) NOT NULL,
    DESCRIPTION  VARCHAR(250)
);

CREATE TABLE IBE$VERSION_HISTORY (
    IBE$VH_ID           INTEGER NOT NULL,
    IBE$VH_MODIFY_DATE  TIMESTAMP NOT NULL,
    IBE$VH_USER_NAME    VARCHAR(67),
    IBE$VH_OBJECT_TYPE  SMALLINT NOT NULL,
    IBE$VH_OBJECT_NAME  VARCHAR(67) NOT NULL,
    IBE$VH_HEADER       BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    IBE$VH_BODY         BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    IBE$VH_DESCRIPTION  BLOB SUB_TYPE 1 SEGMENT SIZE 80
);

CREATE TABLE INF_DICT (
    TABLENAME  VARCHAR(50) NOT NULL,
    NAME       VARCHAR(50) NOT NULL
);

CREATE TABLE INF_ENUM (
    TABLENAME  VARCHAR(50) NOT NULL,
    FIELDNAME  VARCHAR(50) NOT NULL,
    ID         INTEGER NOT NULL,
    NAME       VARCHAR(50) NOT NULL,
    CODE       VARCHAR(50)
);

CREATE TABLE INF_SETTINGS (
    NAME  VARCHAR(50) NOT NULL,
    USR   VARCHAR(50) NOT NULL,
    VALI  INTEGER,
    VALS  VARCHAR(250),
    VALN  DOUBLE PRECISION,
    VALD  DATE
);

CREATE TABLE INF_SETTINGS_META (
    NAME            VARCHAR(50) NOT NULL,
    TYP             INTEGER NOT NULL,
    TITLE           VARCHAR(50) NOT NULL,
    BAND            VARCHAR(50),
    IS_PREFERENCE   INTEGER DEFAULT 0 NOT NULL,
    EDITOR          VARCHAR(50),
    EDITOR_OPTIONS  VARCHAR(250),
    B52_NAME        VARCHAR(50),
    DEF_VALI        INTEGER,
    DEF_VALS        VARCHAR(250),
    DEF_VALN        DOUBLE PRECISION,
    DEF_VALD        DATE
);

CREATE TABLE MSG_BOXES (
    ID        INTEGER NOT NULL,
    STATUS    INTEGER DEFAULT 0 NOT NULL,
    SENDER    VARCHAR(38) DEFAULT USER NOT NULL,
    RECEIVER  VARCHAR(38) NOT NULL,
    TOPIC     VARCHAR(50) NOT NULL,
    TXT       VARCHAR(250) NOT NULL,
    IDAT      DATE DEFAULT 'NOW' NOT NULL,
    RDAT      DATE
);

CREATE TABLE OLD_CERTIF (
    ID                  INTEGER NOT NULL,
    CODE                FLOAT,
    CERTIFICATE_NAME    VARCHAR(50),
    CTYPE               CHAR(1),
    CERTIFICATE_NUMBER  CHAR(15),
    ISSUER              CHAR(15),
    ISSUE_DATE          TIMESTAMP,
    EXPIRE_DATE         TIMESTAMP,
    BRIEF               CHAR(25)
);

CREATE TABLE OLD_CES (
    ID         INTEGER NOT NULL,
    TYPE_TEST  VARCHAR(15)
);

CREATE TABLE OLD_CHILDREN (
    ID         INTEGER NOT NULL,
    CODE       INTEGER,
    SURNAME    CHAR(15),
    NAME       CHAR(15),
    DATE_BORN  TIMESTAMP,
    SEX        CHAR(6)
);

CREATE TABLE OLD_COMPANY (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(40)
);

CREATE TABLE OLD_COMPUTER (
    ID   INTEGER NOT NULL,
    LVL  CHAR(15)
);

CREATE TABLE OLD_COUNTRYS (
    ID       INTEGER NOT NULL,
    COUNTRY  CHAR(12)
);

CREATE TABLE OLD_EMPLOYEE (
    ID                        INTEGER NOT NULL,
    CODE                      INTEGER,
    POST                      CHAR(15),
    SURNAME                   CHAR(20),
    NAME                      CHAR(15),
    FATHERS_NAME              CHAR(15),
    MOTHERS_NAME              CHAR(15),
    DATE_BORN                 TIMESTAMP,
    CITY_BORN                 CHAR(30),
    COUNTRY_BORN              CHAR(12),
    CITIZEN                   CHAR(12),
    ADDRESS_COUNTRY           CHAR(12),
    ADDRESS_CITY              CHAR(40),
    ADDRESS_STREET            CHAR(40),
    PHONE                     CHAR(15),
    ADDRESS_NOTE              CHAR(30),
    MARITAL                   CHAR(10),
    RELATIVE                  CHAR(10),
    NAME_RELATIVE             CHAR(30),
    ADDRESS_RELATIVE          CHAR(40),
    COLOR_HAIR                CHAR(10),
    COLOR_EYES                CHAR(10),
    HIGHT                     FLOAT,
    WEIGHT                    FLOAT,
    EDUCATION                 CHAR(80),
    CERTIFICATE_NUMBER        CHAR(15),
    CERTIFICATE_GRADE         CHAR(30),
    CERTIFICATE_PLACE         CHAR(15),
    CERTIFICATE_EXPIRED       TIMESTAMP,
    CERTIFICATE_ISSUE         TIMESTAMP,
    ENDOR_NUMBER              CHAR(15),
    ENDOR_GRADE               CHAR(30),
    ENDOR_PLACE               CHAR(15),
    ENDOR_ISSUE               TIMESTAMP,
    ENDOR_EXPIRED             TIMESTAMP,
    ENGLISH                   CHAR(15),
    PHOTO                     BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    VESSEL_TYPE               CHAR(50),
    PAY                       FLOAT,
    TRIP                      CHAR(10),
    DATE_TRIP                 TIMESTAMP,
    VESSEL_NAME               CHAR(30),
    VESSEL_PLAN               CHAR(30),
    VESSEL_DATE               TIMESTAMP,
    VESSEL_NOTE               BLOB SUB_TYPE 1 SEGMENT SIZE 240,
    SERVICE                   SMALLINT,
    DATE_REGISTRATION         TIMESTAMP,
    ENGINE_TYPE               CHAR(50),
    RELIGION                  CHAR(20),
    NEARESTAIRPORT            CHAR(30),
    NOOFCHILDREN              FLOAT,
    LANGUAGES                 CHAR(20),
    DATECHANGE                TIMESTAMP,
    OPERATOR                  CHAR(100),
    IDENTIFICATIONNUMBER      FLOAT,
    OVERALLS                  FLOAT,
    SHOES                     FLOAT,
    RATING                    FLOAT,
    CES                       CHAR(45),
    ENGLISH_DATA              TIMESTAMP,
    SMS                       CHAR(30),
    SMS_DATA                  TIMESTAMP,
    COMPUTER                  CHAR(15),
    COMPUTER_DATA             TIMESTAMP,
    MARLINS                   FLOAT,
    CES_DATA                  TIMESTAMP,
    DERIEFIG                  TIMESTAMP,
    POOL                      CHAR(15),
    USA                       TIMESTAMP,
    AUTHENTICAL_VERIFICATION  TIMESTAMP,
    SUBCONTRACTOR             CHAR(35)
);

CREATE TABLE OLD_ENGINE (
    ID           INTEGER NOT NULL,
    ENGINE_NAME  VARCHAR(15)
);

CREATE TABLE OLD_EXPER (
    ID                INTEGER NOT NULL,
    CODE              INTEGER,
    POST              VARCHAR(15),
    VESSEL_TYPE       VARCHAR(10),
    VESSEL_NAME       VARCHAR(30),
    DWT               FLOAT,
    FLAG              VARCHAR(4),
    COMPANY           VARCHAR(40),
    FROM_DATE         TIMESTAMP,
    TO_DATE           TIMESTAMP,
    ENGINE_MAIN       VARCHAR(15),
    ENGINE_KIND       VARCHAR(15),
    HP_MAIN           FLOAT,
    ENGINE_AUX        VARCHAR(15),
    HP_AUX            FLOAT,
    GENERATORS        FLOAT,
    NOTE              VARCHAR(30),
    CARGO_GEAR        VARCHAR(10),
    LOAD              FLOAT,
    SPEED             FLOAT,
    AUTOMATION_CLASS  VARCHAR(4),
    CRANE_TYPE        VARCHAR(10)
);

CREATE TABLE OLD_FLAGS (
    ID       INTEGER NOT NULL,
    FLAG     CHAR(4),
    COUNTRY  CHAR(25)
);

CREATE TABLE OLD_GRADE (
    ID     INTEGER NOT NULL,
    GRADE  VARCHAR(30)
);

CREATE TABLE OLD_ISSUERS (
    ID      INTEGER NOT NULL,
    ISSUER  VARCHAR(15)
);

CREATE TABLE OLD_OPERATOR (
    ID            INTEGER NOT NULL,
    NAMEOPERATOR  CHAR(40)
);

CREATE TABLE OLD_POSTS (
    ID             INTEGER NOT NULL,
    CODE           INTEGER,
    POST           VARCHAR(15),
    FULLNAME       VARCHAR(30),
    COMMAND        SMALLINT,
    COMMANDJUNIOR  SMALLINT
);

CREATE TABLE OLD_REF_CERT (
    ID           INTEGER NOT NULL,
    CERTIFICATE  CHAR(30),
    CTYPE        VARCHAR(1),
    PERIOD       FLOAT,
    BRIEF        VARCHAR(25)
);

CREATE TABLE OLD_TYPE_VES (
    ID              INTEGER NOT NULL,
    TYPE_OF_VESSEL  CHAR(10)
);

CREATE TABLE OLD_VESSELS (
    ID                INTEGER NOT NULL,
    VESSEL            VARCHAR(30),
    VESSEL_TYPE       VARCHAR(10),
    DWT               FLOAT,
    COMPANY           VARCHAR(40),
    ENGINE_MAIN       CHAR(15),
    ENGINE_KIND       CHAR(15),
    HP_MAIN           FLOAT,
    ENGINE_AUX        VARCHAR(15),
    HP_AUX            FLOAT,
    GENERATORS        FLOAT,
    FLAG              VARCHAR(4),
    OURS              SMALLINT,
    OPERATOR          VARCHAR(40),
    CARGO_GEAR        VARCHAR(10),
    LOAD              FLOAT,
    SPEED             FLOAT,
    AUTOMATION_CLASS  CHAR(4),
    CRANE_TYPE        VARCHAR(10),
    GMDSS             SMALLINT,
    ARPA              SMALLINT,
    GPS               SMALLINT,
    ECDIS             SMALLINT,
    FUEL_TYPE         VARCHAR(8),
    LENGHT            INTEGER,
    BEAM              INTEGER,
    DRAUGHT           INTEGER
);

CREATE TABLE SEC_ACL (
    PERMID  VARCHAR(38) NOT NULL,
    USERID  VARCHAR(38) NOT NULL,
    RESID   VARCHAR(38) NOT NULL,
    STATE   INTEGER NOT NULL
);

CREATE TABLE SEC_PERMISSIONS (
    PERMID       VARCHAR(38) NOT NULL,
    NAME         VARCHAR(50) NOT NULL,
    POLID        VARCHAR(38) NOT NULL,
    INHERITBY    VARCHAR(38),
    DESCRIPTION  VARCHAR(250)
);

CREATE TABLE SEC_POLICIES (
    POLID           VARCHAR(38) NOT NULL,
    NAME            VARCHAR(50) NOT NULL,
    PARENTID        VARCHAR(38),
    STATE           INTEGER NOT NULL,
    USE_RES         INTEGER NOT NULL,
    RES_PROVID      VARCHAR(38),
    RES_PARENT_SQL  VARCHAR(1024)
);

CREATE TABLE SEC_USER_ROLES (
    USERID  VARCHAR(38) NOT NULL,
    ROLEID  VARCHAR(38) NOT NULL
);

CREATE TABLE SEC_USERS (
    USERID  VARCHAR(38) NOT NULL,
    NAME    VARCHAR(50) NOT NULL,
    ISROLE  INTEGER DEFAULT 0 NOT NULL
);

INSERT INTO DUMMY (DUMMY) VALUES (1);

COMMIT WORK;

INSERT INTO ENTC_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER_KIND, HANDLER, CMD_DATA, OPTIONS) VALUES ('views.CRW_EMP.List', 'cmd.docs', 'Certs of competency', 2, 'Дополнительно', 0, 2, 'views.CRW_DOC.list', 'EMP_ID=WI.ID', NULL);
INSERT INTO ENTC_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER_KIND, HANDLER, CMD_DATA, OPTIONS) VALUES ('views.CRW_EMP.List', 'cmd.certs', 'Certificates', 3, 'Дополнительно', 0, 2, 'views.CRW_CERT.list', 'EMP_ID=WI.ID', NULL);
INSERT INTO ENTC_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER_KIND, HANDLER, CMD_DATA, OPTIONS) VALUES ('views.CRW_EMP.List', 'cmd.seaexperience', 'Sea experience', 1, 'Дополнительно', 0, 2, 'views.CRW_EMP_EXPER.List', 'EMP_ID=WI.ITEM_ID', NULL);
INSERT INTO ENTC_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER_KIND, HANDLER, CMD_DATA, OPTIONS) VALUES ('views.CRW_EMP.Item', 'cmd.docs', 'Certs of competency', 1, 'Дополнительно', 0, 2, 'views.CRW_DOC.list', 'EMP_ID=WI.ID', NULL);
INSERT INTO ENTC_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER_KIND, HANDLER, CMD_DATA, OPTIONS) VALUES ('views.CRW_EMP.Item', 'cmd.certs', 'Certificates', 3, 'Дополнительно', 0, 2, 'views.CRW_CERT.list', 'EMP_ID=WI.ID', NULL);
INSERT INTO ENTC_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER_KIND, HANDLER, CMD_DATA, OPTIONS) VALUES ('views.CRW_EMP.List', 'cmd.tests', 'Tests', 1, NULL, 0, 2, 'views.CRW_EMP.Tests', 'ID=WI.ITEM_ID', NULL);
INSERT INTO ENTC_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER_KIND, HANDLER, CMD_DATA, OPTIONS) VALUES ('views.CRW_EMP.List', 'cmd.set_free_date', 'Set free date', 0, NULL, 0, 2, 'views.CRW_EMP.FreeDate', 'ID=WI.ITEM_ID', NULL);
INSERT INTO ENTC_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER_KIND, HANDLER, CMD_DATA, OPTIONS) VALUES ('views.CRW_EMP.Item', 'cmd.seaexperience', 'Sea experience', 0, 'Дополнительно', 0, 2, 'views.CRW_EMP_EXPER.List', 'EMP_ID=WI.ID', NULL);
INSERT INTO ENTC_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER_KIND, HANDLER, CMD_DATA, OPTIONS) VALUES ('views.CRW_EMP.List', 'cmd.to_archive', 'Архивировать', 10, 'Дополнительно', 0, 1, 'view.commands.EntityOperExec', 'ENTITY=CRW_EMP;OPER=ChangeStatus;EMP_ID=WI.ITEM_ID;STATUS=2;CONFIRM=Архивировать выбранную запись?', NULL);
INSERT INTO ENTC_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER_KIND, HANDLER, CMD_DATA, OPTIONS) VALUES ('views.CRW_EMP.ListArc', 'cmd.to_active', 'Активировать', 0, NULL, 0, 1, 'view.commands.EntityOperExec', 'ENTITY=CRW_EMP;OPER=ChangeStatus;EMP_ID=WI.ITEM_ID;STATUS=1;CONFIRM=Активировать выбранную запись?', NULL);
INSERT INTO ENTC_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER_KIND, HANDLER, CMD_DATA, OPTIONS) VALUES ('views.CRW_EMP.ListNew', 'cmd.to_active', 'Активировать', 0, NULL, 0, 1, 'view.commands.EntityOperExec', 'ENTITY=CRW_EMP;OPER=ChangeStatus;EMP_ID=WI.ITEM_ID;STATUS=1;CONFIRM=Активировать выбранную запись?', '');
INSERT INTO ENTC_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER_KIND, HANDLER, CMD_DATA, OPTIONS) VALUES ('views.CRW_EMP.ListNew', 'cmd.certs', 'Certificates', 3, 'Дополнительно', 0, 2, 'views.CRW_CERT.list', 'EMP_ID=WI.ID', NULL);
INSERT INTO ENTC_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER_KIND, HANDLER, CMD_DATA, OPTIONS) VALUES ('views.CRW_EMP.ListNew', 'cmd.docs', 'Certs of competency', 2, 'Дополнительно', 0, 2, 'views.CRW_DOC.list', 'EMP_ID=WI.ID', NULL);
INSERT INTO ENTC_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER_KIND, HANDLER, CMD_DATA, OPTIONS) VALUES ('views.CRW_EMP.ListNew', 'cmd.seaexperience', 'Sea experience', 1, 'Дополнительно', 0, 2, 'views.CRW_EMP_EXPER.List', 'EMP_ID=WI.ITEM_ID', NULL);
INSERT INTO ENTC_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER_KIND, HANDLER, CMD_DATA, OPTIONS) VALUES ('views.CRW_EMP.ListNew', 'cmd.tests', 'Tests', 1, NULL, 0, 2, 'views.CRW_EMP.Tests', 'ID=WI.ITEM_ID', NULL);

COMMIT WORK;

INSERT INTO ENTC_GRP (GRP, IDX) VALUES ('Картотека', 20);
INSERT INTO ENTC_GRP (GRP, IDX) VALUES ('Справочники', 30);

COMMIT WORK;

INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_EMP.List', 'IEntityListView', 'CRW_EMP', NULL, 'Personel cards', 'Personel records', 'CanOpen;UseSelector', NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_COUNTRY.List', 'IEntityListView', 'CRW_COUNTRY', NULL, 'Countries', 'Directories', 'CanEdit', NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_COUNTRY.Item', 'IEntityItemView', 'CRW_COUNTRY', NULL, 'Country', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_COUNTRY.New', 'IEntityNewView', 'CRW_COUNTRY', NULL, 'New country', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_POST.List', 'IEntityListView', 'CRW_POST', NULL, 'Posts', 'Directories', 'CanEdit', NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_EMP.New', 'IEntityNewView', 'CRW_EMP', NULL, 'New personel card', NULL, '', NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_EMP.Item', 'IEntityItemView', 'CRW_EMP', NULL, 'Personel card', NULL, '', NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_POST.New', 'IEntityNewView', 'CRW_POST', NULL, 'New Rank', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_POST.Item', 'IEntityItemView', 'CRW_POST', NULL, 'Post', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_EMP_EXPER.List', 'IEntityListView', 'CRW_EMP_EXPER', NULL, 'Emp exper', NULL, 'CanEdit;Title=GetUITitle', NULL, 'EMP_ID', NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_VESSEL.PickList', 'IEntityPickListView', 'CRW_VESSEL', NULL, 'Vessels', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_EMP_EXPER.New', 'IEntityNewView', 'CRW_EMP_EXPER', NULL, 'New experiance', NULL, NULL, NULL, 'EMP_ID', NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_EMP_EXPER.Item', 'IEntityItemView', 'CRW_EMP_EXPER', NULL, 'Emp excperiance', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_EMP.Selector', 'IEntitySelectorView', 'CRW_EMP', NULL, 'Selector', NULL, NULL, NULL, 'EXPER_POST_ID;FREE_DATE', 'EXPER_POST_ID;FREE_DATE', NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_COMPANY.Item', 'IEntityItemView', 'CRW_COMPANY', NULL, 'Company', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_COMPANY.List', 'IEntityListView', 'CRW_COMPANY', NULL, 'Companies', 'Directories', 'CanEdit', NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_COMPANY.New', 'IEntityNewView', 'CRW_COMPANY', NULL, 'New company', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_VESSEL.New', 'IEntityNewView', 'CRW_VESSEL', NULL, 'New vessel', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_VESSEL.List', 'IEntityListView', 'CRW_VESSEL', NULL, 'Vessels', 'Vessels', 'CanEdit', NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_VESSEL.Item', 'IEntityItemView', 'CRW_VESSEL', NULL, 'Vessel', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_ENGINE.Item', 'IEntityItemView', 'CRW_ENGINE', NULL, 'Engine', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_ENGINE.List', 'IEntityListView', 'CRW_ENGINE', NULL, 'Engines', 'Vessels', 'CanEdit', NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_ENGINE.New', 'IEntityNewView', 'CRW_ENGINE', NULL, 'New engine', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_ENGINE.PickList', 'IEntityPickListView', 'CRW_ENGINE', NULL, 'Engines', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_OPERATOR.Item', 'IEntityItemView', 'CRW_OPERATOR', NULL, 'Operator', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_OPERATOR.List', 'IEntityListView', 'CRW_OPERATOR', NULL, 'Operators', 'Directories', 'CanEdit', NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_OPERATOR.New', 'IEntityNewView', 'CRW_OPERATOR', NULL, 'New operator', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_OPERATOR.PickList', 'IEntityPickListView', 'CRW_OPERATOR', NULL, 'Operators', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_VESSELTYPE.Item', 'IEntityItemView', 'CRW_VESSELTYPE', NULL, 'Vessel type', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_VESSELTYPE.List', 'IEntityListView', 'CRW_VESSELTYPE', NULL, 'Vessel types', 'Vessels', 'CanEdit', NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_VESSELTYPE.New', 'IEntityNewView', 'CRW_VESSELTYPE', NULL, 'New vessel type', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_VESSELTYPE.PickList', 'IEntityPickListView', 'CRW_VESSELTYPE', NULL, 'Vessel types', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_ISSUER.Item', 'IEntityItemView', 'CRW_ISSUER', NULL, 'Issuer', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_ISSUER.List', 'IEntityListView', 'CRW_ISSUER', NULL, 'Issuers', 'Documents', 'CanEdit', NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_ISSUER.New', 'IEntityNewView', 'CRW_ISSUER', NULL, 'New issuer', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_DOC.Item', 'IEntityItemView', 'CRW_DOC', NULL, 'Document', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_DOC.List', 'IEntityListView', 'CRW_DOC', NULL, 'Documents', NULL, 'CanEdit;Title=GetUITitle', NULL, 'EMP_ID', NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_DOC.New', 'IEntityNewView', 'CRW_DOC', NULL, 'New document', NULL, NULL, NULL, 'EMP_ID', NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_ISSUER.PickList', 'IEntityPickListView', 'CRW_ISSUER', NULL, 'Issuers', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_GRADE.Item', 'IEntityItemView', 'CRW_GRADE', NULL, 'Grade', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_GRADE.List', 'IEntityListView', 'CRW_GRADE', NULL, 'Grades', 'Documents', 'CanEdit', NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_GRADE.New', 'IEntityNewView', 'CRW_GRADE', NULL, 'New grade', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_GRADE.PickList', 'IEntityPickListView', 'CRW_GRADE', NULL, 'Grades', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_EMP.FreeDate', 'IEntityItemView', 'CRW_EMP', 'FreeDate', 'Set free date', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_CERTTYPE.Item', 'IEntityItemView', 'CRW_CERTTYPE', NULL, 'Cert. type', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_EMP.ListArc', 'IEntityListView', 'CRW_EMP', 'ListArc', 'Personel cards [archive]', 'Personel records', 'CanOpen', 2, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_EMP.ListNew', 'IEntityListView', 'CRW_EMP', 'ListNew', 'Personel cards [new]', 'Personel records', 'CanEdit', 1, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_CERTTYPE.List', 'IEntityListView', 'CRW_CERTTYPE', NULL, 'Cert. types', 'Documents', 'CanEdit', NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_CERTTYPE.New', 'IEntityNewView', 'CRW_CERTTYPE', NULL, 'New cert. type', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_CERT.Item', 'IEntityItemView', 'CRW_CERT', NULL, 'Certificate', NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_CERT.List', 'IEntityListView', 'CRW_CERT', NULL, 'Certificates', NULL, 'CanEdit;Title=GetUITitle', NULL, 'EMP_ID', NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_CERT.New', 'IEntityNewView', 'CRW_CERT', NULL, 'New certificate', NULL, NULL, NULL, 'EMP_ID', NULL, NULL);
INSERT INTO ENTC_UI (URI, UICLASS, ENTITYNAME, VIEWNAME, TITLE, GRP, OPTIONS, IDX, PARAMS, OUTS, CATEGORY) VALUES ('views.CRW_EMP.Tests', 'IEntityItemView', 'CRW_EMP', 'Tests', 'Tests', NULL, NULL, NULL, NULL, NULL, NULL);

COMMIT WORK;

INSERT INTO ENTC_UICLASS (UICLASS, VIEWNAME, DESCRIPTION) VALUES ('IEntityListView', 'List', '{Selector;SelectorInfo,NewURI,ItemURI}');
INSERT INTO ENTC_UICLASS (UICLASS, VIEWNAME, DESCRIPTION) VALUES ('IEntityJournalView', 'Journal', 'States{Selector;SelectorInfo,NewURI,ItemURI}');
INSERT INTO ENTC_UICLASS (UICLASS, VIEWNAME, DESCRIPTION) VALUES ('IEntityItemView', 'Item', NULL);
INSERT INTO ENTC_UICLASS (UICLASS, VIEWNAME, DESCRIPTION) VALUES ('IEntityNewView', 'New', NULL);
INSERT INTO ENTC_UICLASS (UICLASS, VIEWNAME, DESCRIPTION) VALUES ('IEntityComplexView', 'Head', 'Details{DetailNewURI,DetailItemURI}');
INSERT INTO ENTC_UICLASS (UICLASS, VIEWNAME, DESCRIPTION) VALUES ('IEntityPickListView', 'PickList', NULL);
INSERT INTO ENTC_UICLASS (UICLASS, VIEWNAME, DESCRIPTION) VALUES ('IEntityOrgChartView', 'OrgChart', NULL);
INSERT INTO ENTC_UICLASS (UICLASS, VIEWNAME, DESCRIPTION) VALUES ('IEntitySelectorView', 'Selector', NULL);
INSERT INTO ENTC_UICLASS (UICLASS, VIEWNAME, DESCRIPTION) VALUES ('ISecurityResProvider', 'TopNodes', 'Node;ChildNodes;');
INSERT INTO ENTC_UICLASS (UICLASS, VIEWNAME, DESCRIPTION) VALUES ('IEntityActivity', '-', NULL);
INSERT INTO ENTC_UICLASS (UICLASS, VIEWNAME, DESCRIPTION) VALUES ('IEntityDeskView', 'Desk', NULL);
INSERT INTO ENTC_UICLASS (UICLASS, VIEWNAME, DESCRIPTION) VALUES ('IEntityCollectView', '-', 'CollectInfo;CollectList;CollectItems');

COMMIT WORK;

INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('INF_SETTING', NULL, 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('SEC_USER', NULL, 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('SEC_POLICY', NULL, 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('SEC_PERM', NULL, 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('MSG_BOX', NULL, 0, 'Почтовые ящик пользователя');
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('SEC_PROV_BDS_ACNT', 'SEC_PROV*', 0, 'Провайдер ресурсов - учетные счета');
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('SEC_PROV_HRS_DEPT', 'SEC_PROV*', 0, 'Провайдер ресурсов - подразделения');
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('ENTC*', NULL, 1, 'Entity Catalog');
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('ENTC_UI', 'ENTC*', 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('SEC_PROV*', NULL, 1, 'Провайдеры ресурсов');
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('SEC*', NULL, 1, 'Security Service');
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('ENT*', NULL, 1, 'Entity Service');
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CRW_EMP', 'CRW*', 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CRW_COUNTRY', 'CRW*', 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CRW_POST', 'CRW*', 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CRW_EMP_EXPER', 'CRW*', 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CRW_COMPANY', 'CRW*', 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CRW_OPERATOR', 'CRW*', 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CRW_ENGINE', 'CRW*', 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CRW*', NULL, 1, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CRW_VESSEL', 'CRW*', 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CRW_VESSELTYPE', 'CRW*', 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CRW_ISSUER', 'CRW*', 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CRW_DOC', 'CRW*', 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CRW_GRADE', 'CRW*', 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CRW_CERTTYPE', 'CRW*', 0, NULL);
INSERT INTO ENT_ENTITIES (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CRW_CERT', 'CRW*', 0, NULL);

COMMIT WORK;

INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'ID', NULL, '#', 0, 1, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'NAME', NULL, 'Name', 1, 0, NULL, NULL, NULL, 1);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'CODE', NULL, 'Code', 1, 1, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'PHONE', 'Contact data', 'Phone', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'SURNAME', '-', 'Surname', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'NAME', '-', 'Name', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'DATE_BORN', 'Born data', 'Date', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'CITY_BORN', 'Born data', 'City', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'COUNTRY_BORN_ID', 'Born data', 'Country', 1, 0, 'Lookup', 'Entity=CRW_COUNTRY;EView=Lookup;', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'CITIZEN_ID', 'Contact data', 'Citizen', 1, 0, 'Lookup', 'Entity=CRW_COUNTRY;EView=Lookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'FATHERS_NAME', 'Parents', 'Fathers name', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'MOTHERS_NAME', 'Parents', 'Mothers name', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'RELIGION', 'Others data', 'Religion', 1, 0, 'Lookup', 'Entity=CRW_EMP;EView=ReligionLookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'ADDR_COUNTRY_ID', 'Contact data', 'Country', 1, 0, 'Lookup', 'Entity=CRW_COUNTRY;EView=Lookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'FULLNAME', NULL, 'Full name', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_POST', '-', 'COMMAND', NULL, 'Command', 1, 0, 'CheckBox', NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_POST', '-', 'COMMANDJUNIOR', NULL, 'Command Junior', 1, 0, 'CheckBox', NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'ADDR_CITY', 'Contact data', 'City', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'ADDR_STREET', 'Contact data', 'Street', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', 'List', 'DATE_BORN', NULL, 'Date born', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'POST_ID', NULL, 'Post', 1, 0, 'Lookup', 'Entity=CRW_POST;EView=Lookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_DOC', '-', 'ENDOR_ISSUER_ID', NULL, 'Endor issuer', 1, 0, 'Lookup', 'Entity=CRW_ISSUER;EView=Lookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'VIEW_TITLE', NULL, NULL, 0, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'VESSEL_ID', NULL, 'Vessel', 0, 0, 'PickList', '', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'VESSEL', NULL, 'Vessel', 1, 0, 'PickList', 'Action=views.crw_vessel.picklist;', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'EMP_ID', NULL, NULL, 0, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'PHOTO', NULL, 'Photo', 1, 0, 'Image', NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'PHOTO', '-', NULL, 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'FROM_DATE', NULL, 'From date', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'TO_DATE', NULL, 'To date', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'NOTE', NULL, 'Note', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'EXPER', NULL, 'Experience', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'INFO', NULL, NULL, 0, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', 'Selector', 'EXPER_POST_ID', NULL, 'Experience post (5 last)', 1, 0, 'Lookup', 'Entity=CRW_POST;EView=Lookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'FLAG', NULL, 'Flag', 1, 0, 'PickList', 'Action=views.crw_country.picklist;', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'AGE', NULL, 'Age', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_ENGINE', '-', 'NAME', NULL, 'Engine name', 1, 0, NULL, NULL, NULL, 1);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'VESSEL_TYPE', NULL, 'Vessel type', 1, 0, NULL, 'Action=views.crw_vesseltype.picklist;FieldID=VESSEL_TYPE_ID', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'ADDR_NOTE', 'Contact data', 'Note', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'VESSEL_TYPE_ID', NULL, 'Vessel type', 0, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'MARITAL', 'Next of kin', 'Marital', 1, 0, 'Lookup', 'Entity=CRW_EMP;EView=MaritalLookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'NOKIN', 'Next of kin', 'Next of kin', 1, 0, 'Lookup', 'Entity=CRW_EMP;EView=NokinLookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_DOC', '-', 'ENDOR_ISSUED_DATE', NULL, 'Endor issued date', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'COMPANY_ID', NULL, 'Company', 1, 0, 'Lookup', 'Entity=CRW_COMPANY;EView=Lookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'NOKIN_NAME', 'Next of kin', 'Name', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'COMPANY', NULL, 'Company', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'ENGINE_ID', NULL, 'Engine', 1, 0, 'Lookup', 'Entity=CRW_ENGINE;EView=Lookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'ENGINE', NULL, 'Engine', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'OPERATOR_ID', NULL, 'Operator', 1, 0, 'Lookup', 'Entity=CRW_OPERATOR;EView=Lookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'FLAG_ID', NULL, 'Flag', 1, 0, 'Lookup', 'Entity=CRW_COUNTRY;EView=Lookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'NOKIN_ADDR', 'Next of kin', 'Address', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'NOKIN_PHONES', 'Next of kin', 'Phones', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_ISSUER', '-', 'NAME', NULL, 'Issuer', 1, 0, NULL, NULL, NULL, 1);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'FREE_DATE', NULL, 'Free date', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'FREE_DATE_NOTE', NULL, 'Free date note', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', 'FreeDate', 'FREE_DATE_NOTE', NULL, 'Note', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', 'Selector', 'FREE_DATE', NULL, 'Only free from', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_DOC', '-', 'ENDOR_EXPIRED_DATE', NULL, 'Endor expired date', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_DOC', '-', 'NUMBER', NULL, 'Number', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_DOC', '-', 'GRADE_ID', NULL, 'Grade', 1, 0, 'Lookup', 'Entity=CRW_GRADE;EView=Lookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'ISSUER_ID', NULL, 'Issuer', 1, 0, 'Lookup', 'Entity=CRW_ISSUER;EView=Lookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'ISSUED_DATE', NULL, 'Issued date', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'EXPIRED_DATE', NULL, 'Expired date', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'PERIOD', NULL, 'Period', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'BRIEF', NULL, 'Brief', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_CERTTYPE', '-', 'KIND', NULL, 'Kind', 1, 0, 'Lookup', 'Entity=CRW_CERTTYPE;EView=KindLookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'GRADE', NULL, 'Grade', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'ISSUER', NULL, 'Issuer', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'KIND', NULL, 'Kind', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'CLOTHES', 'Metric data', 'Clothes', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'EDUCATION', 'Activities', 'Education', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'SALARY', 'Activities', 'Salary', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'COMPUTER', NULL, 'Computer skills', 1, 0, 'Lookup', 'Entity=CRW_EMP;EView=TestComputerLookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'CERT_NUMBER', NULL, 'Number', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_CERT', '-', 'CERT_ID', NULL, 'Certificate', 1, 0, 'Lookup', 'Entity=CRW_CERTTYPE;EView=Lookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'COLOR_HAIR', 'Metric data', 'Hair color', 1, 0, 'Lookup', 'Entity=CRW_EMP;EView=ColorHairLookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'COLOR_EYES', 'Metric data', 'Eyes color', 1, 0, 'Lookup', 'Entity=CRW_EMP;EView=ColorEyesLookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_DOC', '-', 'ENDOR_ISSUER', NULL, 'Endor issuer', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'HIGHT', 'Metric data', 'Hight', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'WEIGHT', 'Metric data', 'Weight', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW_EMP', '-', 'SHOES', 'Metric data', 'Shoes', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'POST_ALT_ID', 'Activities', 'Alt post', 1, 0, 'Lookup', 'Entity=CRW_POST;EView=Lookup', NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'POST', NULL, 'Post', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CRW*', '-', 'POST_ALT', NULL, 'Alt. post', 1, 0, NULL, NULL, NULL, 0);

COMMIT WORK;

INSERT INTO ENT_OPERS (ENTITYNAME, OPERNAME, SQL_TEXT, IS_SELECT, OPTIONS) VALUES ('INF_SETTING', 'SET', 'execute procedure inf_ev_setting_set(:name, :username, :vali, :vals, :valn, :vald)', 0, NULL);
INSERT INTO ENT_OPERS (ENTITYNAME, OPERNAME, SQL_TEXT, IS_SELECT, OPTIONS) VALUES ('SEC_USER', 'UserRoleCheck', 'select count(*) status from sec_user_roles  where userid = :userid and roleid = :roleid', 1, NULL);
INSERT INTO ENT_OPERS (ENTITYNAME, OPERNAME, SQL_TEXT, IS_SELECT, OPTIONS) VALUES ('SEC_PERM', 'StateGet', 'select state from sec_eo_perm_state_get(:permid, :userid, :resid)', 1, NULL);
INSERT INTO ENT_OPERS (ENTITYNAME, OPERNAME, SQL_TEXT, IS_SELECT, OPTIONS) VALUES ('SEC_POLICY', 'StateGet', 'select state from sec_eo_policy_state_get(:polid)', 1, NULL);
INSERT INTO ENT_OPERS (ENTITYNAME, OPERNAME, SQL_TEXT, IS_SELECT, OPTIONS) VALUES ('SEC_PERM', 'StateSet', 'execute procedure sec_eo_perm_state_set(:permid, :userid, :resid, :state)', 0, NULL);
INSERT INTO ENT_OPERS (ENTITYNAME, OPERNAME, SQL_TEXT, IS_SELECT, OPTIONS) VALUES ('SEC_POLICY', 'StateSet', 'execute procedure sec_eo_policy_state_set(:polid, :state)', 0, NULL);
INSERT INTO ENT_OPERS (ENTITYNAME, OPERNAME, SQL_TEXT, IS_SELECT, OPTIONS) VALUES ('SEC_USER', 'UserRoleAdd', 'insert into sec_user_roles(userid, roleid) values(:userid, :roleid)', 0, NULL);
INSERT INTO ENT_OPERS (ENTITYNAME, OPERNAME, SQL_TEXT, IS_SELECT, OPTIONS) VALUES ('SEC_USER', 'UserRoleRemove', 'delete from sec_user_roles where userid = :userid and roleid = :roleid', 0, NULL);
INSERT INTO ENT_OPERS (ENTITYNAME, OPERNAME, SQL_TEXT, IS_SELECT, OPTIONS) VALUES ('SEC_PERM', 'Check', 'select state from sec_sp_perm_check(:permid, :userid, :resid)', 1, NULL);
INSERT INTO ENT_OPERS (ENTITYNAME, OPERNAME, SQL_TEXT, IS_SELECT, OPTIONS) VALUES ('SEC_POLICY', 'Reset', 'execute procedure sec_eo_policy_reset(:polid)', 0, NULL);
INSERT INTO ENT_OPERS (ENTITYNAME, OPERNAME, SQL_TEXT, IS_SELECT, OPTIONS) VALUES ('MSG_BOX', 'POP', 'select * from msg_sp_box_pop(:last_id)', 1, NULL);
INSERT INTO ENT_OPERS (ENTITYNAME, OPERNAME, SQL_TEXT, IS_SELECT, OPTIONS) VALUES ('MSG_BOX', 'PUSH', 'execute procedure msg_sp_box_push(:receiver, :topic, :txt)', 0, NULL);
INSERT INTO ENT_OPERS (ENTITYNAME, OPERNAME, SQL_TEXT, IS_SELECT, OPTIONS) VALUES ('MSG_BOX', 'MARK', 'update msg_boxes set status = 1 where id = :id', 0, NULL);
INSERT INTO ENT_OPERS (ENTITYNAME, OPERNAME, SQL_TEXT, IS_SELECT, OPTIONS) VALUES ('CRW_EMP', 'ChangeStatus', 'execute procedure crw_ev_emp_change_status(:emp_id, :status)', 0, NULL);

COMMIT WORK;

INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('INF_SETTING', 'META', 'select * from inf_settings_meta order by title', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('INF_SETTING', 'GET', 'select * from inf_ev_setting_get(:name, :username)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('INF_SETTING', 'CHECK', 'select * from inf_ev_setting_check(:name, :username)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('SEC_POLICY', 'List', 'select * from sec_ev_policy_list(:ParentID) order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('SEC_USER', 'List', 'select userid, name, isrole from sec_users order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('SEC_PERM', 'List', 'select * from sec_ev_perm_list(:polid)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('SEC_USER', 'Item', 'select userid, name, isrole from sec_users where userid= :userid', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('SEC_PERM', 'Effective', 'select * from sec_ev_perm_effective(:polid, :permid, :resid)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('ENTC_UI', 'List', 'select * from entc_ev_ui_list', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('ENTC_UI', 'Commands', 'select * from entc_cmd where uri = :uri order by idx', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_COUNTRY', 'List', 'select id, name, flag from crw_countries', NULL, '', 'delete from crw_countries where id = :id', 'select * from crw_countries where id = :id', 1, 'ID', NULL, 0, 'select gen_id(crw_gen, 1) id from dummy');
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_POST', 'List', 'select * from crw_posts', NULL, NULL, 'delete from crw_posts where id = :id', 'select * from crw_posts where id = :id', 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_COUNTRY', 'Item', 'select * from crw_countries where id = :id', NULL, 'update crw_countries set name = :name, flag = :flag where id = :id', '', NULL, 0, NULL, NULL, 0, '');
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_COUNTRY', 'New', 'select gen_id(crw_gen, 1) ID, cast(null as varchar(25)) name from dummy', '', 'insert into crw_countries(id, name, flag) values(:id, :name, :flag)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_POST', 'Item', 'select * from crw_posts where id = :id', NULL, 'update crw_posts set name = :name, fullname = :fullname, command = :command, commandjunior = :commandjunior where id = :id', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_POST', 'New', 'select gen_id(crw_gen, 1) ID, cast(null as varchar(25)) name, cast(null as varchar(50)) fullname, cast(0 as integer) command, cast(0 as integer) commandjunior from dummy', NULL, 'insert into crw_posts(id, name, fullname, command, commandjunior) values(:id, :name, :fullname, :command, :commandjunior)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP', 'List', 'select * from crw_ev_emp_list(null, :exper_post_id, :free_date)', NULL, NULL, NULL, 'select * from crw_ev_emp_list(:id, :exper_post_id, :free_date)', 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP', 'New', 'select * from crw_ev_emp_new', NULL, 'execute procedure crw_ev_emp_u(1, :id, :post_id, :post_alt_id, :surname, :name,  :photo, :photo_del, :fathers_name, :mothers_name,  
:date_born, :country_born_id, :city_born, :citizen_id, :addr_country_id, :addr_city, :addr_street, :addr_note, :phone, :religion, 
:marital, :nokin, :nokin_name, :nokin_addr, :nokin_phones, :color_hair, :color_eyes, :hight, :weight, :shoes, :clothes,
:education, :salary)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP', 'Item', 'select * from crw_ev_emp_item(:id)', NULL, 'execute procedure crw_ev_emp_u(2, :id, :post_id, :post_alt_id, :surname, :name,  :photo, :photo_del, :fathers_name, :mothers_name,  
:date_born, :country_born_id, :city_born, :citizen_id, :addr_country_id, :addr_city, :addr_street, :addr_note, :phone, :religion, 
:marital, :nokin, :nokin_name, :nokin_addr, :nokin_phones, :color_hair, :color_eyes, :hight, :weight, :shoes, :clothes,
:education, :salary)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_COUNTRY', 'Lookup', 'select id, name, flag from crw_countries order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP', 'ReligionLookup', 'select name id, name from inf_sp_enum_lookup(''CRW_EMP'', ''RELIGION'', 1)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_POST', 'Lookup', 'select id, name from crw_posts order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP_EXPER', 'List', 'select * from crw_ev_emp_exper_list(null, :emp_id)', NULL, NULL, NULL, 'select * from crw_ev_emp_exper_list(:id, :emp_id)', 1, 'ID', NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP_EXPER', 'New', 'select * from crw_ev_emp_exper_new(:emp_id)', NULL, 'execute procedure crw_ev_emp_exper_u(1, :id, :emp_id, :post_id, :vessel_id, :from_date, :to_date, :note)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP_EXPER', 'Item', 'select * from crw_ev_emp_exper_item(:id)', NULL, 'execute procedure crw_ev_emp_exper_u(2, :id, :emp_id, :post_id, :vessel_id, :from_date, :to_date, :note)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_VESSEL', 'PickList', 'select id, name from crw_vessels', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_ENGINE', 'Item', 'select * from crw_engines where id = :id', NULL, 'execute procedure crw_ev_engine_u(2, :id, :name)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_ENGINE', 'List', 'select id, name from crw_engines', NULL, NULL, 'execute procedure crw_ev_engine_del(:id)', 'select * from crw_ev_engine_list(:id)', 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_ENGINE', 'New', 'select * from crw_ev_engine_new', NULL, 'execute procedure crw_ev_engine_u(1, :id, :name)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_ENGINE', 'Lookup', 'select id, name from crw_engines order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_OPERATOR', 'Item', 'select * from crw_ev_operator_item(:id)', NULL, 'execute procedure crw_ev_operator_u(2, :id, :name)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_OPERATOR', 'List', 'select * from crw_ev_operator_list(null)', NULL, NULL, 'execute procedure crw_ev_operator_del(:id)', 'select * from crw_ev_operator_list(:id)', 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_OPERATOR', 'New', 'select * from crw_ev_operator_new', NULL, 'execute procedure crw_ev_operator_u(1, :id, :name)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP', 'Selector', 'select * from crw_ev_emp_selector(:exper_post_id, :free_date)', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP', 'SelectorInfo', 'select * from crw_ev_emp_selector(:exper_post_id, :free_date)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_COMPANY', 'List', 'select id, name from crw_companies', NULL, '', 'delete from crw_companies where id = :id', 'select * from crw_companies where id = :id', 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_COMPANY', 'Item', 'select * from crw_companies where id = :id', NULL, 'update crw_companies set name = :name where id = :id', '', NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_COMPANY', 'New', 'select gen_id(crw_gen, 1) ID, cast(null as varchar(25)) name from dummy', NULL, 'insert into crw_companies(id, name) values(:id, :name)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_COMPANY', 'Lookup', 'select id, name from crw_companies order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_VESSEL', 'List', 'select * from crw_ev_vessel_list(null)', NULL, NULL, 'execute procedure crw_ev_vessel_del(:id)', 'select * from crw_ev_vessel_list(:id)', 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_OPERATOR', 'Lookup', 'select id, name from crw_operators order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP_EXPER', 'GetUITitle', 'select name || '' - sea experience'' from crw_emp where id = :emp_id and coalesce(:emp_id, 0) <> 0 union  select ''Employee not selected'' from dummy where coalesce(:emp_id, 0) = 0', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_VESSELTYPE', 'Item', 'select * from crw_ev_vesseltype_item(:id)', NULL, 'execute procedure crw_ev_vesseltype_u(2, :id, :name)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_VESSELTYPE', 'List', 'select * from crw_ev_vesseltype_list(null)', NULL, NULL, 'execute procedure crw_ev_vesseltype_del(:id)', 'select * from crw_ev_vesseltype_list(:id)', 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_VESSELTYPE', 'New', 'select * from crw_ev_vesseltype_new', NULL, 'execute procedure crw_ev_vesseltype_u(1, :id, :name)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_VESSELTYPE', 'PickList', 'select id, name from crw_vessel_types', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP', 'MaritalLookup', 'select name id, name from inf_sp_enum_lookup(''CRW_EMP'', ''MARITAL'', 1)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_ISSUER', 'Item', 'select * from crw_issuers where id = :id', NULL, 'update crw_issuers set name = :name where id = :id', '', NULL, 0, NULL, NULL, 0, '');
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_VESSEL', 'New', 'select * from crw_ev_vessel_new', NULL, 'execute procedure crw_ev_vessel_u(1, :id, :name)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_VESSEL', 'Item', 'select * from crw_ev_vessel_item(:id)', NULL, 'execute procedure crw_ev_vessel_u(2, :ID, :NAME, :VESSEL_TYPE_ID, :DWT, :COMPANY_ID, :ENGINE_ID,
      :ENGINE_KIND, :HP_MAIN, :ENGINE_AUX, :HP_AUX, :GENERATORS, :FLAG_ID, :OURS,
      :OPERATOR_ID, :CARGO_GEAR, :LOAD, :SPEED, :AUTOMATION_CLASS, :CRANE_TYPE,
      :GMDSS, :ARPA, :GPS, :ECDIS, :FUEL_TYPE, :LENGHT, :BEAM, :DRAUGHT)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_ISSUER', 'List', 'select id, name from crw_issuers order by name', NULL, '', 'delete from crw_issuers where id = :id', 'select * from crw_issuers where id = :id', 1, 'ID', NULL, 0, 'select gen_id(crw_gen, 1) id from dummy');
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP', 'NokinLookup', 'select name id, name from inf_sp_enum_lookup(''CRW_EMP'', ''NOKIN'', 1)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_ISSUER', 'Lookup', 'select id, name from crw_issuers order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_ISSUER', 'New', 'select gen_id(crw_gen, 1) ID, cast(null as varchar(25)) name from dummy', '', 'insert into crw_issuers(id, name) values(:id, :name)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_DOC', 'GetUITitle', 'select name || '' - cert of competency'' from crw_emp where id = :emp_id and coalesce(:emp_id, 0) <> 0 union  select ''Employee not selected'' from dummy where coalesce(:emp_id, 0) = 0', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_DOC', 'Item', 'select * from crw_ev_doc_item(:id)', NULL, 'execute procedure CRW_EV_DOC_U (2, :ID, :EMP_ID, :NUMBER,
 :GRADE_ID, :ISSUER_ID, :ISSUED_DATE, :ENDOR_ISSUER_ID, :ENDOR_ISSUED_DATE, :ENDOR_EXPIRED_DATE)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_DOC', 'List', 'select * from crw_ev_doc_list(null, :emp_id)', NULL, NULL, NULL, 'select * from crw_ev_doc_list(:id, :emp_id)', 1, 'ID', NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_DOC', 'New', 'select * from crw_ev_doc_new(:emp_id)', NULL, 'execute procedure CRW_EV_DOC_U (1, :ID, :EMP_ID, :NUMBER,
 :GRADE_ID, :ISSUER_ID, :ISSUED_DATE, :ENDOR_ISSUER_ID, :ENDOR_ISSUED_DATE, :ENDOR_EXPIRED_DATE)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP', 'FreeDate', 'select * from crw_ev_emp_freedate(:id)', NULL, 'execute procedure crw_ev_emp_freedate_u(:id, :free_date, :free_date_note)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_GRADE', 'Item', 'select * from crw_ev_grade_item(:id)', NULL, 'execute procedure crw_ev_grade_u(2, :id, :name)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP', 'ListArc', 'select * from crw_ev_emp_list_arc(null)', NULL, NULL, NULL, 'select * from crw_ev_emp_list_arc(:id)', 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP', 'ListNew', 'select * from crw_ev_emp_list_new(null)', NULL, NULL, 'execute procedure crw_ev_emp_del(:id)', 'select * from crw_ev_emp_list_new(:id)', 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_GRADE', 'List', 'select * from crw_ev_grade_list(null)', NULL, NULL, 'execute procedure crw_ev_grade_del(:id)', 'select * from crw_ev_grade_list(:id)', 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_GRADE', 'Lookup', 'select id, name from crw_grades order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_GRADE', 'New', 'select * from crw_ev_grade_new', NULL, 'execute procedure crw_ev_grade_u(1, :id, :name)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP', 'TestComputerLookup', 'select name id, name from inf_sp_enum_lookup(''CRW_EMP'', ''COMPUTER'', 1) order by id', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_CERT', 'Item', 'select * from crw_ev_cert_item(:id)', NULL, 'execute procedure CRW_EV_CERT_U (2, :ID, :EMP_ID, :CERT_ID, :CERT_NUMBER, :ISSUER_ID, :ISSUED_DATE, :EXPIRED_DATE)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_CERTTYPE', 'Item', 'select * from crw_cert_types where id = :id', NULL, 'update crw_cert_types set name = :name, kind = :kind, period = :period, brief = :brief where id = :id', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_CERTTYPE', 'List', 'select * from crw_cert_types order by name', NULL, NULL, 'delete from crw_cert_types where id = :id', 'select * from crw_cert_types where id = :id', 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_CERTTYPE', 'Lookup', 'select id, name, kind from crw_cert_types order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_CERTTYPE', 'New', 'select gen_id(crw_gen, 1) ID, cast(null as varchar(50)) name, cast(null as varchar(50)) kind, cast(null as integer) period, cast(null as varchar(25)) brief from dummy', NULL, 'insert into crw_cert_types(id, name, kind, period, brief) values(:id, :name, :kind, :period, :brief)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_CERTTYPE', 'KindLookup', 'select name id, name from inf_sp_enum_lookup(''CRW_CERT_TYPES'', ''KIND'', 1)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP', 'ColorHairLookup', 'select name id, name from inf_sp_enum_lookup(''CRW_EMP'', ''COLOR_HAIR'', 1)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_CERT', 'List', 'select * from crw_ev_cert_list(null, :emp_id)', NULL, NULL, NULL, 'select * from crw_ev_CERT_list(:id, :emp_id)', 1, 'ID', NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_CERT', 'New', 'select * from crw_ev_cert_new(:emp_id)', NULL, 'execute procedure CRW_EV_CERT_U (1, :ID, :EMP_ID, :CERT_ID, :CERT_NUMBER, :ISSUER_ID, :ISSUED_DATE, :EXPIRED_DATE)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_CERT', 'GetUITitle', 'select name || '' - certificates'' from crw_emp where id = :emp_id and coalesce(:emp_id, 0) <> 0 union  select ''Employee not selected'' from dummy where coalesce(:emp_id, 0) = 0', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP', 'ColorEyesLookup', 'select name id, name from inf_sp_enum_lookup(''CRW_EMP'', ''COLOR_EYES'', 1)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CRW_EMP', 'Tests', 'select * from crw_ev_emp_tests(:id)', NULL, 'execute procedure crw_ev_emp_tests_u(:id, :computer)', NULL, NULL, 0, NULL, NULL, 0, NULL);

COMMIT WORK;

INSERT INTO ENT_VIEW_LINKS (ENTITYNAME, VIEWNAME, LINKED_ENTITYNAME, LINKED_VIEWNAME, LINK_KIND, LINKED_FIELD) VALUES ('CRW_EMP', 'List', 'CRW_EMP', 'FreeDate', 1, NULL);
INSERT INTO ENT_VIEW_LINKS (ENTITYNAME, VIEWNAME, LINKED_ENTITYNAME, LINKED_VIEWNAME, LINK_KIND, LINKED_FIELD) VALUES ('CRW_EMP', 'ListNew', 'CRW_EMP', 'New', 1, NULL);
INSERT INTO ENT_VIEW_LINKS (ENTITYNAME, VIEWNAME, LINKED_ENTITYNAME, LINKED_VIEWNAME, LINK_KIND, LINKED_FIELD) VALUES ('CRW_EMP', 'List', 'CRW_EMP', 'Tests', 1, NULL);

COMMIT WORK;

INSERT INTO INF_DICT (TABLENAME, NAME) VALUES ('ENT_', 'Entities');
INSERT INTO INF_DICT (TABLENAME, NAME) VALUES ('ENTC_', 'Entity UI');
INSERT INTO INF_DICT (TABLENAME, NAME) VALUES ('INF_', 'Infrastructure');
INSERT INTO INF_DICT (TABLENAME, NAME) VALUES ('MSG_', 'Messaging');
INSERT INTO INF_DICT (TABLENAME, NAME) VALUES ('SEC_', 'Security');

COMMIT WORK;

INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'RELIGION', 0, '-', '-');
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'RELIGION', 1, 'CATHOLIC', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'RELIGION', 2, 'CHRISTIAN', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'RELIGION', 3, 'MOSLEM', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('-', 'SEX', 0, 'MALE', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('-', 'SEX', 1, 'FEMALE', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'ENGLISH', 1, 'VERY GOOD', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'ENGLISH', 2, 'GOOD', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'ENGLISH', 3, 'SATISFACTORY', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'ENGLISH', 4, 'POOR', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'MARITAL', 1, 'SINGLE', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'MARITAL', 2, 'MARRIED', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'MARITAL', 3, 'DIVORSED', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'NOKIN', 1, 'WIFE', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'NOKIN', 2, 'HUSBAND', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'NOKIN', 3, 'MOTHER', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'NOKIN', 4, 'FATHER', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'NOKIN', 5, 'SISTER', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'NOKIN', 6, 'BROTHER', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'NOKIN', 7, 'SON', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'COMPUTER', 2, '2-UNSATISFACTOR', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'STATUS', 0, 'NEW', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'STATUS', 1, 'ACTIVE', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'STATUS', 2, 'ARCHIVE', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'COLOR_HAIR', 1, 'DARK', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'COLOR_HAIR', 2, 'BLOND', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_CERT_TYPES', 'KIND', 1, 'NATIONAL PASSPORT', 'N');
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_CERT_TYPES', 'KIND', 2, 'FOREIGN PASSPORT', 'F');
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_CERT_TYPES', 'KIND', 3, 'DIPLOMA', 'D');
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_CERT_TYPES', 'KIND', 4, 'FLAGSTATE PASSPORT', 'S');
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_CERT_TYPES', 'KIND', 5, 'MEDICAL CERTIFICATE', 'M');
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_CERT_TYPES', 'KIND', 6, 'ANOTHER', 'A');
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_CERT_TYPES', 'KIND', 7, 'FOREIGN ENDORSEMENT', 'E');
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_CERT_TYPES', 'KIND', 8, 'SPECIAL QUALIFICATION', 'Q');
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_CERT_TYPES', 'KIND', 9, 'USA VISA', 'U');
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_CERT_TYPES', 'KIND', 10, 'TANKER ENDORSEMENT', 'T');
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_CERT_TYPES', 'KIND', 11, 'BELGIAN VISA', 'B');
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'COLOR_EYES', 1, 'GREEN', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'COLOR_EYES', 2, 'BLUE', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'COLOR_EYES', 3, 'BROWN', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'COLOR_EYES', 4, 'GREY', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'COMPUTER', 5, '3-UNSATISFACTOR', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'COMPUTER', 6, '4-SATISFACTORY ', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'COMPUTER', 7, '5-SATISFACTORY ', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'COMPUTER', 8, '6-V.SATISFACTOR', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'COMPUTER', 9, '7-GOOD         ', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'COMPUTER', 10, '8-GOOD         ', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'COMPUTER', 11, '9-VERY GOOD    ', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CRW_EMP', 'COMPUTER', 12, '10-EXCELENT    ', NULL);

COMMIT WORK;

INSERT INTO SEC_POLICIES (POLID, NAME, PARENTID, STATE, USE_RES, RES_PROVID, RES_PARENT_SQL) VALUES ('App.Activities', 'Доступ к функциям программы', NULL, 1, 1, 'security.resprovider.app.activities', NULL);
INSERT INTO SEC_POLICIES (POLID, NAME, PARENTID, STATE, USE_RES, RES_PROVID, RES_PARENT_SQL) VALUES ('App.Reports.Engine', 'Подстистема "Отчеты"', NULL, 1, 0, NULL, NULL);
INSERT INTO SEC_POLICIES (POLID, NAME, PARENTID, STATE, USE_RES, RES_PROVID, RES_PARENT_SQL) VALUES ('BUILT-IN', 'Администраторы', NULL, 1, 0, NULL, NULL);
INSERT INTO SEC_POLICIES (POLID, NAME, PARENTID, STATE, USE_RES, RES_PROVID, RES_PARENT_SQL) VALUES ('App.Reports', 'Доступ к отчетам', 'App.Reports.Engine', 1, 1, 'security.resprovider.app.reports', NULL);

COMMIT WORK;

INSERT INTO SEC_PERMISSIONS (PERMID, NAME, POLID, INHERITBY, DESCRIPTION) VALUES ('app.activity.execute', 'Выполнить', 'App.Activities', NULL, NULL);
INSERT INTO SEC_PERMISSIONS (PERMID, NAME, POLID, INHERITBY, DESCRIPTION) VALUES ('app.report.execute', 'Выполнить', 'App.Reports', NULL, NULL);
INSERT INTO SEC_PERMISSIONS (PERMID, NAME, POLID, INHERITBY, DESCRIPTION) VALUES ('app.report.engine.access', 'Конструирование отчетов', 'App.Reports.Engine', NULL, NULL);
INSERT INTO SEC_PERMISSIONS (PERMID, NAME, POLID, INHERITBY, DESCRIPTION) VALUES ('app.report.setup', 'Настроить', 'App.Reports', NULL, NULL);
INSERT INTO SEC_PERMISSIONS (PERMID, NAME, POLID, INHERITBY, DESCRIPTION) VALUES ('builtin.unrestricted', 'Неограниченный доступ', 'BUILT-IN', NULL, NULL);

COMMIT WORK;

INSERT INTO SEC_USERS (USERID, NAME, ISROLE) VALUES ('SYSDBA', 'SYSDBA', 0);

COMMIT WORK;

INSERT INTO SEC_ACL (PERMID, USERID, RESID, STATE) VALUES ('builtin.unrestricted', 'SYSDBA', ' ', 1);

COMMIT WORK;



/******************************************************************************/
/*                                Primary Keys                                */
/******************************************************************************/

ALTER TABLE CRW_CERTS ADD CONSTRAINT PK_CRW_CERTS PRIMARY KEY (ID);
ALTER TABLE CRW_CERT_TYPES ADD CONSTRAINT PK_CRW_CERT_TYPES PRIMARY KEY (ID);
ALTER TABLE CRW_CHILDS ADD CONSTRAINT PK_CRW_CHILDS PRIMARY KEY (ID);
ALTER TABLE CRW_COMPANIES ADD CONSTRAINT PK_CRW_COMPANIES PRIMARY KEY (ID);
ALTER TABLE CRW_COUNTRIES ADD CONSTRAINT PK_CRW_COUNTRIES PRIMARY KEY (ID);
ALTER TABLE CRW_DOCS ADD CONSTRAINT PK_CRW_DOCS PRIMARY KEY (ID);
ALTER TABLE CRW_EMP ADD CONSTRAINT PK_CRW_EMP PRIMARY KEY (ID);
ALTER TABLE CRW_ENGINES ADD CONSTRAINT PK_CRW_ENGINES PRIMARY KEY (ID);
ALTER TABLE CRW_EXPER ADD CONSTRAINT PK_CRW_EXPER PRIMARY KEY (ID);
ALTER TABLE CRW_GRADES ADD CONSTRAINT PK_CRW_GRADES PRIMARY KEY (ID);
ALTER TABLE CRW_ISSUERS ADD CONSTRAINT PK_CRW_ISSUERS PRIMARY KEY (ID);
ALTER TABLE CRW_OPERATORS ADD CONSTRAINT PK_CRW_OPERATORS PRIMARY KEY (ID);
ALTER TABLE CRW_POSTS ADD CONSTRAINT PK_CRW_POSTS PRIMARY KEY (ID);
ALTER TABLE CRW_TESTS ADD CONSTRAINT PK_CRW_TESTS PRIMARY KEY (CODE, ID);
ALTER TABLE CRW_VESSELS ADD CONSTRAINT PK_CRW_VESSELS PRIMARY KEY (ID);
ALTER TABLE CRW_VESSEL_TYPES ADD CONSTRAINT PK_CRW_VESSEL_TYPES PRIMARY KEY (ID);
ALTER TABLE DUMMY ADD CONSTRAINT PK_DUMMY PRIMARY KEY (DUMMY);
ALTER TABLE ENTC_CMD ADD CONSTRAINT PK_ENTC_CMD PRIMARY KEY (URI, CMD);
ALTER TABLE ENTC_GRP ADD CONSTRAINT PK_ENTC_GRP PRIMARY KEY (GRP);
ALTER TABLE ENTC_UI ADD CONSTRAINT PK_ENTC_UI PRIMARY KEY (URI);
ALTER TABLE ENTC_UICLASS ADD CONSTRAINT PK_ENTC_UICLASS PRIMARY KEY (UICLASS);
ALTER TABLE ENT_ENTITIES ADD CONSTRAINT PK_ENT_ENTITIES PRIMARY KEY (ENTITYNAME);
ALTER TABLE ENT_FIELDS ADD CONSTRAINT PK_ENT_FIELDS PRIMARY KEY (ENTITYNAME, VIEWNAME, FIELDNAME);
ALTER TABLE ENT_OPERS ADD CONSTRAINT PK_ENT_OPERS PRIMARY KEY (ENTITYNAME, OPERNAME);
ALTER TABLE ENT_VIEWS ADD CONSTRAINT PK_ENT_VIEWS PRIMARY KEY (ENTITYNAME, VIEWNAME);
ALTER TABLE ENT_VIEW_LINKS ADD CONSTRAINT PK_ENT_VIEW_LINKS PRIMARY KEY (ENTITYNAME, VIEWNAME, LINKED_ENTITYNAME, LINKED_VIEWNAME, LINK_KIND);
ALTER TABLE IBE$VERSION_HISTORY ADD PRIMARY KEY (IBE$VH_ID);
ALTER TABLE INF_DICT ADD CONSTRAINT PK_INF_DICT PRIMARY KEY (TABLENAME);
ALTER TABLE INF_ENUM ADD CONSTRAINT PK_INF_ENUM PRIMARY KEY (TABLENAME, FIELDNAME, ID);
ALTER TABLE INF_SETTINGS ADD CONSTRAINT PK_INF_SETTINGS PRIMARY KEY (NAME, USR);
ALTER TABLE INF_SETTINGS_META ADD CONSTRAINT PK_INF_SETTINGS_META PRIMARY KEY (NAME);
ALTER TABLE MSG_BOXES ADD CONSTRAINT PK_MSG_BOXES PRIMARY KEY (ID);
ALTER TABLE OLD_CERTIF ADD PRIMARY KEY (ID);
ALTER TABLE OLD_CES ADD PRIMARY KEY (ID);
ALTER TABLE OLD_CHILDREN ADD PRIMARY KEY (ID);
ALTER TABLE OLD_COMPANY ADD PRIMARY KEY (ID);
ALTER TABLE OLD_COMPUTER ADD PRIMARY KEY (ID);
ALTER TABLE OLD_COUNTRYS ADD PRIMARY KEY (ID);
ALTER TABLE OLD_EMPLOYEE ADD PRIMARY KEY (ID);
ALTER TABLE OLD_ENGINE ADD PRIMARY KEY (ID);
ALTER TABLE OLD_EXPER ADD PRIMARY KEY (ID);
ALTER TABLE OLD_FLAGS ADD PRIMARY KEY (ID);
ALTER TABLE OLD_GRADE ADD PRIMARY KEY (ID);
ALTER TABLE OLD_ISSUERS ADD PRIMARY KEY (ID);
ALTER TABLE OLD_OPERATOR ADD PRIMARY KEY (ID);
ALTER TABLE OLD_POSTS ADD PRIMARY KEY (ID);
ALTER TABLE OLD_REF_CERT ADD PRIMARY KEY (ID);
ALTER TABLE OLD_TYPE_VES ADD PRIMARY KEY (ID);
ALTER TABLE OLD_VESSELS ADD PRIMARY KEY (ID);
ALTER TABLE SEC_ACL ADD CONSTRAINT PK_SEC_ACL PRIMARY KEY (PERMID, USERID, RESID);
ALTER TABLE SEC_PERMISSIONS ADD CONSTRAINT PK_SEC_PERMISSIONS PRIMARY KEY (PERMID);
ALTER TABLE SEC_POLICIES ADD CONSTRAINT PK_SEC_POLICIES PRIMARY KEY (POLID);
ALTER TABLE SEC_USERS ADD CONSTRAINT PK_SEC_USERS PRIMARY KEY (USERID);
ALTER TABLE SEC_USER_ROLES ADD CONSTRAINT PK_SEC_USER_ROLES PRIMARY KEY (USERID, ROLEID);


/******************************************************************************/
/*                                Foreign Keys                                */
/******************************************************************************/

ALTER TABLE CRW_EMP ADD CONSTRAINT FK_CRW_EMP_ADDR_COUNTRY FOREIGN KEY (ADDR_COUNTRY_ID) REFERENCES CRW_COUNTRIES (ID);
ALTER TABLE CRW_EMP ADD CONSTRAINT FK_CRW_EMP_CITIZEN FOREIGN KEY (CITIZEN_ID) REFERENCES CRW_COUNTRIES (ID);
ALTER TABLE CRW_EMP ADD CONSTRAINT FK_CRW_EMP_COUNTRY_BORN FOREIGN KEY (COUNTRY_BORN_ID) REFERENCES CRW_COUNTRIES (ID);
ALTER TABLE CRW_EMP ADD CONSTRAINT FK_CRW_EMP_POST FOREIGN KEY (POST_ID) REFERENCES CRW_POSTS (ID);
ALTER TABLE CRW_EXPER ADD CONSTRAINT FK_CRW_EXPER_COMPANY FOREIGN KEY (COMPANY_ID) REFERENCES CRW_COMPANIES (ID);
ALTER TABLE CRW_EXPER ADD CONSTRAINT FK_CRW_EXPER_POST FOREIGN KEY (POST_ID) REFERENCES CRW_POSTS (ID);
ALTER TABLE CRW_EXPER ADD CONSTRAINT FK_CRW_EXPER_VESSEL FOREIGN KEY (VESSEL_ID) REFERENCES CRW_VESSELS (ID);
ALTER TABLE CRW_VESSELS ADD CONSTRAINT FK_CRW_VESSELS_COMPANY FOREIGN KEY (COMPANY_ID) REFERENCES CRW_COMPANIES (ID);
ALTER TABLE CRW_VESSELS ADD CONSTRAINT FK_CRW_VESSELS_ENGINE FOREIGN KEY (ENGINE_ID) REFERENCES CRW_ENGINES (ID);
ALTER TABLE CRW_VESSELS ADD CONSTRAINT FK_CRW_VESSELS_FLAG FOREIGN KEY (FLAG_ID) REFERENCES CRW_COUNTRIES (ID);
ALTER TABLE CRW_VESSELS ADD CONSTRAINT FK_CRW_VESSELS_OPERATOR FOREIGN KEY (OPERATOR_ID) REFERENCES CRW_OPERATORS (ID);
ALTER TABLE CRW_VESSELS ADD CONSTRAINT FK_CRW_VESSELS_VESSEL_TYPE FOREIGN KEY (VESSEL_TYPE_ID) REFERENCES CRW_VESSEL_TYPES (ID);
ALTER TABLE SEC_ACL ADD CONSTRAINT FK_SEC_ACL_PERM FOREIGN KEY (PERMID) REFERENCES SEC_PERMISSIONS (PERMID);
ALTER TABLE SEC_ACL ADD CONSTRAINT FK_SEC_ACL_USER FOREIGN KEY (USERID) REFERENCES SEC_USERS (USERID);
ALTER TABLE SEC_PERMISSIONS ADD CONSTRAINT FK_SEC_PERMISSIONS_INHERITBY FOREIGN KEY (INHERITBY) REFERENCES SEC_PERMISSIONS (PERMID);
ALTER TABLE SEC_PERMISSIONS ADD CONSTRAINT FK_SEC_PERMISSIONS_POL FOREIGN KEY (POLID) REFERENCES SEC_POLICIES (POLID);
ALTER TABLE SEC_POLICIES ADD CONSTRAINT FK_SEC_POLICIES_PARENT FOREIGN KEY (PARENTID) REFERENCES SEC_POLICIES (POLID);
ALTER TABLE SEC_USER_ROLES ADD CONSTRAINT FK_SEC_USER_ROLES_ROLE FOREIGN KEY (ROLEID) REFERENCES SEC_USERS (USERID);
ALTER TABLE SEC_USER_ROLES ADD CONSTRAINT FK_SEC_USER_ROLES_USER FOREIGN KEY (USERID) REFERENCES SEC_USERS (USERID);


/******************************************************************************/
/*                                  Indices                                   */
/******************************************************************************/

CREATE INDEX IDX_CRW_COMPANIES_NAME ON CRW_COMPANIES (NAME);
CREATE INDEX CRW_COUNTRIES_NAME ON CRW_COUNTRIES (NAME);
CREATE INDEX IDX_CRW_EXPER_EMP ON CRW_EXPER (EMP_ID);
CREATE INDEX IDX_CRW_POSTS_NAME ON CRW_POSTS (NAME);
CREATE INDEX IDX_CRW_VESSELS_NAME ON CRW_VESSELS (NAME);
CREATE INDEX MSG_BOXES_IDX_RECEIVER ON MSG_BOXES (RECEIVER);
CREATE INDEX MSG_BOXES_IDX_STATUS ON MSG_BOXES (STATUS);
CREATE INDEX OLD_EMPLOYEE_CODE ON OLD_EMPLOYEE (CODE);
CREATE INDEX SEC_PERMISSIONS_IDX_POL ON SEC_PERMISSIONS (POLID);
CREATE INDEX SEC_POLICIES_IDX_PARENT ON SEC_POLICIES (PARENTID);


/******************************************************************************/
/*                                  Triggers                                  */
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/*                            Triggers for tables                             */
/******************************************************************************/



/* Trigger: CRW_COUNTRIES_BI */
CREATE TRIGGER CRW_COUNTRIES_BI FOR CRW_COUNTRIES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  new.name = trim(new.name);
  new.flag = trim(new.flag);
end
^

/* Trigger: CRW_EMP_BI */
CREATE TRIGGER CRW_EMP_BI FOR CRW_EMP
ACTIVE BEFORE INSERT POSITION 0
as
begin
  /* Trigger text */
  if (new.id is null) then
    new.id = gen_id(crw_gen, 1);
end
^

/* Trigger: CRW_EXPER_BI */
CREATE TRIGGER CRW_EXPER_BI FOR CRW_EXPER
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
as
begin

  if (inserting and new.vessel_id is not null or
      updating and coalesce(old.vessel_id, -1) <> coalesce(new.vessel_id, -1)) then
    select name, company_id from crw_vessels where id = new.vessel_id
    into new.vessel, new.company_id;

end
^

/* Trigger: CRW_POSTS_BI */
CREATE TRIGGER CRW_POSTS_BI FOR CRW_POSTS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    select max(id) + 1 from CRW_POSTS
    into new.id;
end
^

/* Trigger: IBE$VERSION_HISTORY_BI */
CREATE TRIGGER IBE$VERSION_HISTORY_BI FOR IBE$VERSION_HISTORY
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.IBE$VH_ID IS NULL) THEN
    NEW.IBE$VH_ID = GEN_ID(IBE$VERSION_HISTORY_ID_GEN,1);
  NEW.IBE$VH_USER_NAME = USER;
  NEW.IBE$VH_MODIFY_DATE = 'NOW';
END
^

/* Trigger: MSG_BOXES_BU */
CREATE TRIGGER MSG_BOXES_BU FOR MSG_BOXES
ACTIVE BEFORE UPDATE POSITION 0
as
begin
  if (new.status <> old.status and old.status = 0) then
    new.rdat = 'NOW';
end
^

/* Trigger: SEC_PERMISSIONS_BD */
CREATE TRIGGER SEC_PERMISSIONS_BD FOR SEC_PERMISSIONS
ACTIVE BEFORE DELETE POSITION 0
as
begin
  delete from sec_acl a where a.permid = old.permid;
end
^

/* Trigger: SEC_POLICIES_BD */
CREATE TRIGGER SEC_POLICIES_BD FOR SEC_POLICIES
ACTIVE BEFORE DELETE POSITION 0
as
begin
  if (old.polid = 'BUILD-IN') then
    exception raise 'It is not allowed for built-in policy';
end
^

/* Trigger: SEC_POLICIES_BU */
CREATE TRIGGER SEC_POLICIES_BU FOR SEC_POLICIES
ACTIVE BEFORE UPDATE POSITION 0
as
begin
  if (new.polid = 'BUILT-IN' and new.state <> old.state and new.state = 0) then
    exception raise 'It is not allowed for built-in policy';
end
^

/* Trigger: SEC_USERS_BD */
CREATE TRIGGER SEC_USERS_BD FOR SEC_USERS
ACTIVE BEFORE DELETE POSITION 0
as
begin
  delete from sec_acl a where a.userid = old.userid;
  delete from sec_user_roles r where r.userid = old.userid;
  delete from sec_user_roles r where r.roleid = old.userid;
end
^

/* Trigger: SEC_USERS_BI */
CREATE TRIGGER SEC_USERS_BI FOR SEC_USERS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.name is null) then
    new.name = new.userid;
end
^

/* Trigger: SEC_USERS_BU */
CREATE TRIGGER SEC_USERS_BU FOR SEC_USERS
ACTIVE BEFORE UPDATE POSITION 0
as
begin
  if (new.name is null) then
    new.name = new.userid;
end
^

SET TERM ; ^



/******************************************************************************/
/*                             Stored Procedures                              */
/******************************************************************************/


SET TERM ^ ;

ALTER PROCEDURE CRW_EV_CERT_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    CERT_ID INTEGER,
    CERT_NUMBER VARCHAR(25),
    ISSUER_ID INTEGER,
    ISSUED_DATE TIMESTAMP,
    EXPIRED_DATE TIMESTAMP,
    VIEW_TITLE VARCHAR(50))
AS
declare variable kind varchar(50);
declare variable emp varchar(50);
begin
  id = id_;
  select c.emp_id, c.cert_id, c.cert_number, c.issuer_id, c.issued_date, c.expired_date
  from crw_certs c
  where c.id = :id_
  into emp_id, cert_id, cert_number, issuer_id, issued_date, expired_date;

  select name from crw_emp where id = :emp_id into :emp;

  view_title = coalesce(emp, '') ||  ' - ' || coalesce(cert_number, '');

  suspend;
end^


ALTER PROCEDURE CRW_EV_CERT_LIST (
    ID_ INTEGER,
    EMP_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    CERT VARCHAR(50),
    CERT_NUMBER VARCHAR(25),
    ISSUER VARCHAR(50),
    ISSUED_DATE TIMESTAMP,
    EXPIRED_DATE TIMESTAMP)
AS
begin
  for
    select c.id, t.name, c.cert_number, i.name, c.issued_date, c.expired_date
    from crw_certs c
      left join crw_cert_types t on (c.cert_id = t.id)
      left join crw_issuers i on (c.issuer_id = i.id)
    where (:id_ is null and c.emp_id = :emp_id_) or (c.id = :id_)
    into :id, :cert, :cert_number, :issuer, issued_date, expired_date
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE CRW_EV_CERT_NEW (
    EMP_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    CERT_ID INTEGER,
    CERT_NUMBER VARCHAR(25),
    ISSUER_ID INTEGER,
    ISSUER VARCHAR(50),
    ISSUED_DATE TIMESTAMP,
    EXPIRED_DATE TIMESTAMP,
    VIEW_TITLE VARCHAR(50))
AS
declare variable emp_name varchar(50);
begin
  id = gen_id(crw_gen, 1);
  emp_id = emp_id_;

  select e.name from crw_emp e where e.id = :emp_id_
  into :emp_name;

  view_title = coalesce(emp_name, '') || ' - ' || 'cert.';

  suspend;
end^


ALTER PROCEDURE CRW_EV_CERT_U (
    ACT INTEGER,
    ID INTEGER,
    EMP_ID INTEGER,
    CERT_ID INTEGER,
    CERT_NUMBER VARCHAR(25),
    ISSUER_ID INTEGER,
    ISSUED_DATE TIMESTAMP,
    EXPIRED_DATE TIMESTAMP)
AS
begin
  if (act = 1) then
  begin
    insert into crw_certs(id, emp_id, cert_id, cert_number, issuer_id, issued_date, expired_date)
    values(:id, :emp_id, :cert_id, :cert_number, :issuer_id, :issued_date, :expired_date);
  end
  else
  begin
    update crw_certs set
      emp_id = :emp_id,
      cert_id = :cert_id,
      cert_number = :cert_number,
      issuer_id = :issuer_id,
      issued_date = :issued_date,
      expired_date = :expired_date
    where id = :id;
  end
end^


ALTER PROCEDURE CRW_EV_CHILD_DEL (
    ID INTEGER)
AS
begin
  delete from crw_childs where id = :id;
end^


ALTER PROCEDURE CRW_EV_CHILD_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    DATE_BORN DATE,
    SEX VARCHAR(6))
AS
begin
  select c.ID, c.EMP_ID, c.SURNAME, c.NAME, c.DATE_BORN, c.SEX
  from crw_childs c
  where c.id = :id_
  into :ID, :EMP_ID, :SURNAME, :NAME, :DATE_BORN, :SEX;
  suspend;
end^


ALTER PROCEDURE CRW_EV_CHILD_LIST (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    EMP VARCHAR(50),
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    DATE_BORN DATE,
    SEX VARCHAR(6))
AS
begin
  for
    select c.ID, c.EMP_ID, c.SURNAME, c.NAME, c.DATE_BORN, c.SEX, e.name
    from crw_childs c
      left join crw_emp e on (e.id = c.emp_id)
    where e.id = :id_

    union all

    select c.ID, c.EMP_ID, c.SURNAME, c.NAME, c.DATE_BORN, c.SEX, e.name
    from crw_childs c
      left join crw_emp e on (e.id = c.emp_id)
    where :id_ is null
    into :ID, :EMP_ID, :SURNAME, :NAME, :DATE_BORN, :SEX, :EMP
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE CRW_EV_CHILD_NEW
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    DATE_BORN DATE,
    SEX VARCHAR(6))
AS
begin
  id = gen_id(crw_gen, 1);
  suspend;
end^


ALTER PROCEDURE CRW_EV_CHILD_U (
    ACT INTEGER,
    ID INTEGER,
    EMP_ID INTEGER,
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    DATE_BORN DATE,
    SEX VARCHAR(6))
AS
begin
  if (act = 1) then
  begin
    insert into crw_childs(ID, EMP_ID, SURNAME, NAME, DATE_BORN, SEX)
    values(:ID, :EMP_ID, :SURNAME, :NAME, :DATE_BORN, :SEX);
  end
  else
  begin
    update crw_childs set
      EMP_ID = :EMP_ID,
      SURNAME = :SURNAME,
      NAME = :NAME,
      DATE_BORN = :DATE_BORN,
      SEX = :SEX
    where id = :id;
  end
end^


ALTER PROCEDURE CRW_EV_COMPANY_DEL (
    ID INTEGER)
AS
begin
  delete from crw_companies where id = :id;
end^


ALTER PROCEDURE CRW_EV_COMPANY_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  select c.ID, c.NAME
  from crw_companies c
  where c.id = :id_
  into :ID, :NAME;
  suspend;
end^


ALTER PROCEDURE CRW_EV_COMPANY_LIST (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  for
    select c.ID, c.NAME
    from crw_companies c
    where c.id = :id_

    union all

    select c.ID, c.NAME
    from crw_companies c
    where :id_ is null
    into :ID, :NAME
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE CRW_EV_COMPANY_NEW
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  id = gen_id(crw_gen, 1);
  suspend;
end^


ALTER PROCEDURE CRW_EV_COMPANY_U (
    ACT INTEGER,
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  if (act = 1) then
  begin
    insert into crw_companies(ID, NAME)
    values(:ID, :NAME);
  end
  else
  begin
    update crw_companies set
      NAME = :NAME
    where id = :id;
  end
end^


ALTER PROCEDURE CRW_EV_DOC_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    NUMBER VARCHAR(25),
    GRADE_ID INTEGER,
    ISSUER_ID INTEGER,
    ISSUED_DATE TIMESTAMP,
    ENDOR_ISSUER_ID INTEGER,
    ENDOR_ISSUED_DATE TIMESTAMP,
    ENDOR_EXPIRED_DATE TIMESTAMP,
    VIEW_TITLE VARCHAR(50))
AS
declare variable emp varchar(50);
begin
  id = id_;
  select c.emp_id, e.name,
    c.number, c.grade_id,
    c.issuer_id, c.issued_date, c.endor_issuer_id, c.endor_issued_date, c.endor_expired_date
  from crw_docs c
    left join crw_emp e on (c.emp_id = e.id)
  where c.id = :id_
  into emp_id, emp, number, grade_id, issuer_id, issued_date, endor_issuer_id, endor_issued_date, endor_expired_date;

  view_title = EMP || ' - cert of competency - ' || coalesce(number, '');

  suspend;
end^


ALTER PROCEDURE CRW_EV_DOC_LIST (
    ID_ INTEGER,
    EMP_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    NUMBER VARCHAR(25),
    GRADE VARCHAR(50),
    ISSUER VARCHAR(50),
    ISSUED_DATE TIMESTAMP,
    ENDOR_ISSUER VARCHAR(50),
    ENDOR_ISSUED_DATE TIMESTAMP,
    ENDOR_EXPIRED_DATE TIMESTAMP)
AS
begin
  EMP_ID = EMP_ID_;
  for
    select c.id, c.number, g.name, i.name,
      c.issued_date, e.name, c.endor_issued_date, c.endor_expired_date
    from crw_docs c
      left join crw_grades g on (c.grade_id = g.id)
      left join crw_issuers i on (c.issuer_id = i.id)
      left join crw_issuers e on (c.endor_issuer_id = e.id)
    where (:id_ is null and c.emp_id = :emp_id_) or (c.id = :id_)
    into id, number, grade, issuer, issued_date, endor_issuer, endor_issued_date, endor_expired_date
  do
  begin
    suspend;
  end

end^


ALTER PROCEDURE CRW_EV_DOC_NEW (
    EMP_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    NUMBER VARCHAR(25),
    GRADE_ID INTEGER,
    ISSUER_ID INTEGER,
    ISSUED_DATE TIMESTAMP,
    ENDOR_ISSUER_ID INTEGER,
    ENDOR_ISSUED_DATE TIMESTAMP,
    ENDOR_EXPIRED_DATE TIMESTAMP,
    VIEW_TITLE VARCHAR(50))
AS
declare variable emp_name varchar(50);
begin
  id = gen_id(crw_gen, 1);
  emp_id = emp_id_;

  select e.name from crw_emp e where e.id = :emp_id_
  into :emp_name;

  view_title = coalesce(emp_name, '') || ' - ' || 'cert of competency';

  suspend;
end^


ALTER PROCEDURE CRW_EV_DOC_U (
    ACT INTEGER,
    ID INTEGER,
    EMP_ID INTEGER,
    NUMBER VARCHAR(25),
    GRADE_ID INTEGER,
    ISSUER_ID INTEGER,
    ISSUED_DATE TIMESTAMP,
    ENDOR_ISSUER_ID INTEGER,
    ENDOR_ISSUED_DATE TIMESTAMP,
    ENDOR_EXPIRED_DATE TIMESTAMP)
AS
begin
  if (act = 1) then
  begin
    insert into crw_docs(id, emp_id, number, grade_id, issuer_id, issued_date, endor_issuer_id, endor_issued_date, endor_expired_date)
    values(:id, :emp_id, :number, :grade_id, :issuer_id, :issued_date, :endor_issuer_id, :endor_issued_date, :endor_expired_date);
  end
  else
  begin
    update crw_docs set
      emp_id = :emp_id,
      number = :number,
      grade_id = :grade_id,
      issuer_id = :issuer_id,
      issued_date = :issued_date,
      endor_issuer_id = :endor_issuer_id,
      endor_issued_date = :endor_issued_date,
      endor_expired_date = :endor_expired_date
    where id = :id;
  end
end^


ALTER PROCEDURE CRW_EV_EMP_CHANGE_STATUS (
    EMP_ID_ INTEGER,
    STATUS_ INTEGER)
AS
begin
  update crw_emp
  set status = :status_
  where id = :emp_id_;

end^


ALTER PROCEDURE CRW_EV_EMP_DEL (
    ID INTEGER)
AS
begin
  delete from crw_emp where id = :id;
end^


ALTER PROCEDURE CRW_EV_EMP_EXPER_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    POST_ID INTEGER,
    VESSEL_ID INTEGER,
    VESSEL VARCHAR(50),
    FROM_DATE DATE,
    TO_DATE DATE,
    NOTE VARCHAR(100),
    VIEW_TITLE VARCHAR(50))
AS
declare variable emp_name varchar(50);
begin
  id = id_;
  select e.emp_id, e.post_id, e.vessel_id, e.from_date, e.to_date, e.note,
    v.name
  from crw_exper e
    left join crw_vessels v on (e.vessel_id = v.id)
  where e.id = :id_
  into :emp_id, :post_id, :vessel_id, :from_date, :to_date, :note,
    vessel;

  select e.name from crw_emp e where e.id = :emp_id
  into :emp_name;

  view_title = coalesce(emp_name, '') || ' - ' || 'sea experiance';

  suspend;
end^


ALTER PROCEDURE CRW_EV_EMP_EXPER_LIST (
    ID_ INTEGER,
    EMP_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    POST VARCHAR(50),
    VESSEL VARCHAR(50),
    FROM_DATE DATE,
    TO_DATE DATE,
    NOTE VARCHAR(100))
AS
begin
  for
    select e.id, p.name, v.name,  e.from_date, e.to_date, e.note
    from crw_exper e
      left join crw_posts p on (p.id = e.post_id)
      left join crw_vessels v on (v.id = e.vessel_id)
    where e.id = :id_

    union all

    select e.id, p.name, v.name,  e.from_date, e.to_date, e.note
    from crw_exper e
    left join crw_posts p on (p.id = e.post_id)
    left join crw_vessels v on (v.id = e.vessel_id)
    where :id_ is null and e.emp_id = :emp_id_
    into :id, :post, :vessel, :from_date, to_date, :note
  do
  begin

    suspend;
  end
end^


ALTER PROCEDURE CRW_EV_EMP_EXPER_NEW (
    EMP_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    EMP_ID INTEGER,
    POST_ID INTEGER,
    VESSEL_ID INTEGER,
    VESSEL VARCHAR(50),
    FROM_DATE DATE,
    TO_DATE DATE,
    NOTE VARCHAR(100),
    VIEW_TITLE VARCHAR(50))
AS
declare variable emp_name varchar(50);
begin
  id = gen_id(crw_gen, 1);
  emp_id = emp_id_;

  select e.name from crw_emp e where e.id = :emp_id_
  into :emp_name;

  view_title = coalesce(emp_name, '') || ' - ' || 'sea experiance';

  suspend;
end^


ALTER PROCEDURE CRW_EV_EMP_EXPER_U (
    ACT INTEGER,
    ID INTEGER,
    EMP_ID INTEGER,
    POST_ID INTEGER,
    VESSEL_ID INTEGER,
    FROM_DATE DATE,
    TO_DATE DATE,
    NOTE VARCHAR(100))
AS
begin
  if (act = 1) then
  begin
    insert into crw_exper(id, emp_id, post_id, vessel_id, from_date, to_date, note)
    values(:id, :emp_id, :post_id, :vessel_id, :from_date, :to_date, :note);
  end
  else
  begin
    update crw_exper
    set
      post_id = :post_id,
      vessel_id = :vessel_id,
      from_date = :from_date,
      to_date = :to_date,
      note = :note
    where id = :id;
  end
end^


ALTER PROCEDURE CRW_EV_EMP_FREEDATE (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    FREE_DATE DATE,
    FREE_DATE_NOTE VARCHAR(250),
    VIEW_TITLE VARCHAR(250))
AS
begin
  if (id_ is null) then
    exception raise 'Eployeer not selected';

  select id, free_date, free_date_note, surname || ' - free date'
  from crw_emp where id = :id_
  into :id, :free_date, :free_date_note, :view_title;
  suspend;

end^


ALTER PROCEDURE CRW_EV_EMP_FREEDATE_U (
    ID_ INTEGER,
    FREE_DATE DATE,
    FREE_DATE_NOTE VARCHAR(250))
AS
begin
  update crw_emp
  set free_date = :free_date,
      free_date_note = :free_date_note
  where id = :id_;

end^


ALTER PROCEDURE CRW_EV_EMP_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    CODE INTEGER,
    POST_ID INTEGER,
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    PHOTO BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    EDUCATION VARCHAR(250),
    POST_ALT_ID INTEGER,
    SALARY FLOAT,
    FATHERS_NAME VARCHAR(25),
    MOTHERS_NAME VARCHAR(25),
    DATE_BORN DATE,
    COUNTRY_BORN_ID INTEGER,
    CITY_BORN VARCHAR(50),
    CITIZEN_ID INTEGER,
    ADDR_COUNTRY_ID INTEGER,
    ADDR_CITY VARCHAR(50),
    ADDR_STREET VARCHAR(50),
    ADDR_NOTE VARCHAR(50),
    PHONE VARCHAR(25),
    RELIGION VARCHAR(25),
    MARITAL VARCHAR(25),
    NOKIN VARCHAR(25),
    NOKIN_NAME VARCHAR(50),
    NOKIN_ADDR VARCHAR(50),
    NOKIN_PHONES VARCHAR(50),
    COLOR_HAIR VARCHAR(25),
    COLOR_EYES VARCHAR(25),
    HIGHT FLOAT,
    WEIGHT FLOAT,
    SHOES FLOAT,
    CLOTHES FLOAT)
AS
begin
  select id, post_id, post_alt_id, surname, name, photo, fathers_name, mothers_name,
    date_born, country_born_id, city_born, citizen_id, religion,
    addr_country_id, addr_city, addr_street, addr_note, phone,
    marital, nokin, nokin_name, nokin_addr, nokin_phones,
    color_hair, color_eyes, hight, weight, shoes, clothes, education,
    salary
  from crw_emp e
  where e.id = :id_
  into :id, :post_id, :post_alt_id, :surname, :name, :photo, :fathers_name, :mothers_name,
       :date_born, :country_born_id, :city_born, :citizen_id, :religion,
       :addr_country_id, :addr_city, :addr_street, addr_note, :phone,
       marital, nokin, nokin_name, nokin_addr, nokin_phones,
       color_hair, color_eyes, hight, weight, shoes, clothes, :education,
       :salary;
  code = id;
  suspend;
end^


ALTER PROCEDURE CRW_EV_EMP_LIST (
    ID_ INTEGER,
    EXPER_POST_ID_ INTEGER,
    FREE_DATE_ DATE)
RETURNS (
    ID INTEGER,
    POST VARCHAR(25),
    POST_ALT VARCHAR(25),
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    AGE INTEGER,
    PHONE VARCHAR(25),
    EXPER VARCHAR(255),
    FATHERS_NAME VARCHAR(25),
    MOTHERS_NAME VARCHAR(25),
    FREE_DATE DATE,
    FREE_DATE_NOTE VARCHAR(250))
AS
declare variable date_born date;
declare variable exper_post_id integer;
declare variable exper_post_name varchar(50);
declare variable exper_check integer;
declare variable free_date_check integer;
begin
  for
    select e.id, e.surname, e.name, p.name post, p2.name, e.date_born, e.phone,
      e.fathers_name, e.mothers_name, e.free_date, e.free_date_note
    from crw_emp e
      left join crw_posts p on (p.id = e.post_id)
      left join crw_posts p2 on (p2.id = e.post_alt_id)
    where e.id = :id_ and e.status = 1

    union all

    select e.id, e.surname, e.name, p.name post, p2.name, e.date_born, e.phone,
      e.fathers_name, e.mothers_name, e.free_date, e.free_date_note
    from crw_emp e
      left join crw_posts p on (p.id = e.post_id)
      left join crw_posts p2 on (p2.id = e.post_alt_id)
    where :id_ is null and e.status = 1
    into :id, :surname, :name, :post, :post_alt, :date_born, :phone,
      :fathers_name, :mothers_name, :free_date, :free_date_note
  do
  begin
    --if (date_born is not null) then
    age = DATEDIFF(YEAR, date_born, current_date);

    exper = '';
    
    if (exper_post_id_ is null) then
      exper_check = 1;
    else
      exper_check = 0;

    for
      select first 5 e.post_id, p.name
      from crw_exper e left join crw_posts p on (e.post_id = p.id)
      where e.emp_id = :id and p.id is not null
      order by e.to_date desc
      into :exper_post_id, :exper_post_name
    do begin
      if (coalesce(exper_post_id_, exper_post_id) = exper_post_id) then
        exper_check = 1;

      if (exper = '') then
        exper = exper_post_name;
      else
        exper = exper_post_name || '; ' || exper;

    end

    -- selector
    if (free_date_ is not null) then
    begin
      if (coalesce(free_date, free_date_) <= free_date_) then
        free_date_check = 1;
      else
        free_date_check = 0;
    end
    else
      free_date_check = 1;

    if (exper_check = 1 and free_date_check = 1) then
      suspend;
  end
end^


ALTER PROCEDURE CRW_EV_EMP_LIST_ARC (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    POST VARCHAR(25),
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    AGE INTEGER,
    PHONE VARCHAR(25),
    EXPER VARCHAR(255))
AS
declare variable date_born date;
declare variable exper_post_id integer;
declare variable exper_post_name varchar(50);
begin
  for
    select e.id, e.surname, e.name, p.name post, e.date_born, e.phone
    from crw_emp e
      left join crw_posts p on (p.id = e.post_id)
    where e.id = :id_ and e.status = 2
    union all
    select e.id, e.surname, e.name, p.name post, e.date_born, e.phone
    from crw_emp e
      left join crw_posts p on (p.id = e.post_id)
    where :id_ is null and e.status = 2
    into :id, :surname, :name, :post, :date_born, :phone
  do
  begin
    --if (date_born is not null) then
    age = DATEDIFF(YEAR, date_born, current_date);

    exper = '';

    for
      select first 5 e.post_id, p.name
      from crw_exper e left join crw_posts p on (e.post_id = p.id)
      where e.emp_id = :id and p.id is not null
      order by e.to_date desc
      into :exper_post_id, :exper_post_name
    do begin
      if (exper = '') then
        exper = exper_post_name;
      else
        exper = exper_post_name || '; ' || exper;

    end

    suspend;
  end
end^


ALTER PROCEDURE CRW_EV_EMP_LIST_NEW (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    POST VARCHAR(25),
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    AGE INTEGER,
    PHONE VARCHAR(25))
AS
declare variable date_born date;
begin
  for
    select e.id, e.surname, e.name, p.name post, e.date_born, e.phone
    from crw_emp e
      left join crw_posts p on (p.id = e.post_id)
    where e.id = :id_ and e.status = 0

    union all

    select e.id, e.surname, e.name, p.name post, e.date_born, e.phone
    from crw_emp e
      left join crw_posts p on (p.id = e.post_id)
    where :id_ is null and e.status = 0
    into :id, :surname, :name, :post, :date_born, :phone
  do
  begin
    --if (date_born is not null) then
    age = DATEDIFF(YEAR, date_born, current_date);

    suspend;
  end
end^


ALTER PROCEDURE CRW_EV_EMP_NEW
RETURNS (
    ID INTEGER,
    CODE VARCHAR(25),
    POST_ID INTEGER,
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    PHOTO BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    EDUCATION VARCHAR(250),
    POST_ALT_ID INTEGER,
    SALARY FLOAT,
    FATHERS_NAME VARCHAR(25),
    MOTHERS_NAME VARCHAR(25),
    DATE_BORN DATE,
    COUNTRY_BORN_ID INTEGER,
    CITY_BORN VARCHAR(25),
    CITIZEN_ID INTEGER,
    ADDR_COUNTRY_ID INTEGER,
    ADDR_CITY VARCHAR(25),
    ADDR_STREET VARCHAR(50),
    ADDR_NOTE VARCHAR(50),
    PHONE VARCHAR(25),
    RELIGION VARCHAR(25),
    MARITAL VARCHAR(25),
    NOKIN VARCHAR(25),
    NOKIN_NAME VARCHAR(50),
    NOKIN_ADDR VARCHAR(50),
    NOKIN_PHONES VARCHAR(50),
    COLOR_HAIR VARCHAR(25),
    COLOR_EYES VARCHAR(25),
    HIGHT FLOAT,
    WEIGHT FLOAT,
    SHOES FLOAT,
    CLOTHES FLOAT)
AS
begin
  id = gen_id(crw_gen, 1);
  suspend;
end^


ALTER PROCEDURE CRW_EV_EMP_SELECTOR (
    EXPER_POST_ID_ INTEGER,
    FREE_DATE_ DATE)
RETURNS (
    EXPER_POST_ID INTEGER,
    FREE_DATE DATE,
    INFO VARCHAR(250))
AS
begin
  exper_post_id = exper_post_id_;
  free_date = free_date_;
  info = '';

  if (exper_post_id is not null) then
    select name from crw_posts p where p.id = :exper_post_id
    into :info;

  if (free_date is not null) then
    if (info = '') then
      info = 'Free date less ' || :free_date;
    else
      info = info || ' and free date less ' || :free_date;
  suspend;
end^


ALTER PROCEDURE CRW_EV_EMP_TESTS (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    COMPUTER VARCHAR(25),
    VIEW_TITLE VARCHAR(250))
AS
begin
  if (id_ is null) then
    exception raise 'Employee not selected';

  select e.id, e.computer,
    e.surname || ' - tests'
  from crw_emp e where e.id = :id_
  into :id, :computer, :view_title;
  suspend;

end^


ALTER PROCEDURE CRW_EV_EMP_TESTS_U (
    ID_ INTEGER,
    COMPUTER VARCHAR(25))
AS
begin

  update crw_emp set
    computer = :computer
  where id = :id_;

end^


ALTER PROCEDURE CRW_EV_EMP_U (
    ACT INTEGER,
    ID INTEGER,
    POST_ID INTEGER,
    POST_ALT_ID INTEGER,
    SURNAME VARCHAR(25),
    NAME VARCHAR(25),
    PHOTO BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    PHOTO_DEL INTEGER,
    FATHERS_NAME VARCHAR(25),
    MOTHERS_NAME VARCHAR(25),
    DATE_BORN DATE,
    COUNTRY_BORN_ID INTEGER,
    CITY_BORN VARCHAR(50),
    CITIZEN_ID INTEGER,
    ADDR_COUNTRY_ID INTEGER,
    ADDR_CITY VARCHAR(50),
    ADDR_STREET VARCHAR(50),
    ADDR_NOTE VARCHAR(50),
    PHONE VARCHAR(25),
    RELIGION VARCHAR(25),
    MARITAL VARCHAR(25),
    NOKIN VARCHAR(25),
    NOKIN_NAME VARCHAR(50),
    NOKIN_ADDR VARCHAR(50),
    NOKIN_PHONES VARCHAR(50),
    COLOR_HAIR VARCHAR(25),
    COLOR_EYES VARCHAR(25),
    HIGHT FLOAT,
    WEIGHT FLOAT,
    SHOES FLOAT,
    CLOTHES FLOAT,
    EDUCATION VARCHAR(250),
    SALARY FLOAT)
AS
begin
  if (act = 1) then
  begin
    insert into crw_emp(id, status, post_id, post_alt_id, surname, name, photo, fathers_name, mothers_name,
      date_born, country_born_id, city_born, citizen_id, religion,
      addr_country_id, addr_city, addr_street, phone, addr_note,
      marital, nokin, nokin_name, nokin_addr, nokin_phones,
      color_hair, color_eyes, hight, weight, shoes, clothes, education, salary)
    values(:id, 0, :post_id, :post_alt_id, :surname, :name, :photo, :fathers_name, :mothers_name,
      :date_born, :country_born_id, :city_born, :citizen_id, :religion,
      :addr_country_id, :addr_city, :addr_street, :phone, :addr_note,
      :marital, :nokin, :nokin_name, :nokin_addr, :nokin_phones,
      :color_hair, :color_eyes, :hight, :weight, :shoes, :clothes, :education, :salary);
  end
  else
  begin
    update crw_emp set
      post_id = :post_id,
      post_alt_id = :post_alt_id,
      surname = :surname,
      name = :name,
      fathers_name = :fathers_name,
      mothers_name = :mothers_name,
      date_born = :date_born,
      country_born_id = :country_born_id,
      city_born = :city_born,
      citizen_id = :citizen_id,
      religion = :religion,
      addr_country_id = :addr_country_id,
      addr_city = :addr_city,
      addr_street = :addr_street,
      addr_note = :addr_note,
      phone = :phone,
      marital = :marital,
      nokin = :nokin,
      nokin_name = :nokin_name,
      nokin_addr = :nokin_addr,
      nokin_phones = :nokin_phones,
      color_hair = :color_hair,
      color_eyes = :color_eyes,
      hight = :hight,
      weight = :weight,
      shoes = :shoes,
      clothes = :clothes,
      education = :education,
      salary = :salary
    where id = :id;

    if (photo_del = 1) then
      update crw_emp set
        photo = null
      where id = :id;
    else if (photo is not null) then
      update crw_emp set
        photo = :photo
      where id = :id;

  end
end^


ALTER PROCEDURE CRW_EV_ENGINE_DEL (
    ID INTEGER)
AS
begin
  delete from crw_engines where id = :id;
end^


ALTER PROCEDURE CRW_EV_ENGINE_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  select c.ID, c.NAME
  from crw_engines c
  where c.id = :id_
  into :ID, :NAME;
  suspend;
end^


ALTER PROCEDURE CRW_EV_ENGINE_LIST (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  for
    select c.ID, c.NAME
    from crw_engines c
    where c.id = :id_

    union all

    select c.ID, c.NAME
    from crw_engines c
    where :id_ is null
    into :ID, :NAME
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE CRW_EV_ENGINE_NEW
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  id = gen_id(crw_gen, 1);
  suspend;
end^


ALTER PROCEDURE CRW_EV_ENGINE_U (
    ACT INTEGER,
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  if (act = 1) then
  begin
    insert into crw_engines(ID, NAME)
    values(:ID, :NAME);
  end
  else
  begin
    update crw_engines
     set
      NAME = :NAME
    where id = :id;
  end
end^


ALTER PROCEDURE CRW_EV_OPERATOR_DEL (
    ID INTEGER)
AS
begin
  delete from crw_operators where id = :id;
end^


ALTER PROCEDURE CRW_EV_OPERATOR_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  select c.ID, c.NAME
  from crw_operators c
  where c.id = :id_
  into :ID, :NAME;
  suspend;
end^


ALTER PROCEDURE CRW_EV_OPERATOR_LIST (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  for
    select c.ID, c.NAME
    from crw_operators c
    where c.id = :id_

    union all

    select c.ID, c.NAME
    from crw_operators c
    where :id_ is null
    into :ID, :NAME
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE CRW_EV_OPERATOR_NEW
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  id = gen_id(crw_gen, 1);
  suspend;
end^


ALTER PROCEDURE CRW_EV_OPERATOR_U (
    ACT INTEGER,
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  if (act = 1) then
  begin
    insert into crw_operators(ID, NAME)
    values(:ID, :NAME);
  end
  else
  begin
    update crw_operators
     set
      NAME = :NAME
    where id = :id;
  end
end^


ALTER PROCEDURE CRW_EV_VESSEL_DEL (
    ID INTEGER)
AS
begin
  delete from crw_vessels where id = :id;
end^


ALTER PROCEDURE CRW_EV_VESSEL_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    VESSEL_TYPE_ID INTEGER,
    VESSEL_TYPE_NAME VARCHAR(50),
    DWT DOUBLE PRECISION,
    COMPANY_ID INTEGER,
    ENGINE_ID INTEGER,
    ENGINE_KIND VARCHAR(15),
    HP_MAIN DOUBLE PRECISION,
    ENGINE_AUX VARCHAR(15),
    HP_AUX DOUBLE PRECISION,
    GENERATORS DOUBLE PRECISION,
    FLAG_ID INTEGER,
    OURS SMALLINT,
    OPERATOR_ID INTEGER,
    CARGO_GEAR VARCHAR(10),
    LOAD DOUBLE PRECISION,
    SPEED DOUBLE PRECISION,
    AUTOMATION_CLASS VARCHAR(4),
    CRANE_TYPE VARCHAR(10),
    GMDSS SMALLINT,
    ARPA SMALLINT,
    GPS SMALLINT,
    ECDIS SMALLINT,
    FUEL_TYPE VARCHAR(8),
    LENGHT INTEGER,
    BEAM INTEGER,
    DRAUGHT INTEGER)
AS
begin
  select v.ID, v.NAME, v.vessel_type_id, t.name, v.dwt, v.company_id,
      v.engine_id, v.ENGINE_KIND, v.HP_MAIN, v.ENGINE_AUX, v.HP_AUX,
      v.GENERATORS, v.flag_id, v.OURS, v.operator_id,
      v.CARGO_GEAR, v.LOAD, v.SPEED, v.AUTOMATION_CLASS,
      v.CRANE_TYPE, v.GMDSS, v.ARPA, v.GPS, v.ECDIS,
      v.FUEL_TYPE, v.LENGHT, v.BEAM, v.DRAUGHT
  from crw_vessels v
    left join crw_vessel_types t on (v.vessel_type_id = t.id)
  where v.id = :id_
  into :ID, :NAME, :vessel_type_id,  :vessel_type_name, :dwt, :company_id,
      :engine_id, :ENGINE_KIND, :HP_MAIN, :ENGINE_AUX, :HP_AUX,
      :GENERATORS, :flag_id, :OURS, :operator_id,
      :CARGO_GEAR, :LOAD, :SPEED, :AUTOMATION_CLASS,
      :CRANE_TYPE, :GMDSS, :ARPA, :GPS, :ECDIS,
      :FUEL_TYPE, :LENGHT, :BEAM, :DRAUGHT;
  suspend;
end^


ALTER PROCEDURE CRW_EV_VESSEL_LIST (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    VESSEL_TYPE VARCHAR(50),
    DWT DOUBLE PRECISION,
    COMPANY VARCHAR(50),
    ENGINE VARCHAR(50),
    ENGINE_KIND VARCHAR(15),
    HP_MAIN DOUBLE PRECISION,
    ENGINE_AUX VARCHAR(15),
    HP_AUX DOUBLE PRECISION,
    GENERATORS DOUBLE PRECISION,
    FLAG VARCHAR(4),
    OURS SMALLINT,
    OPERATOR VARCHAR(50),
    CARGO_GEAR VARCHAR(10),
    LOAD DOUBLE PRECISION,
    SPEED DOUBLE PRECISION,
    AUTOMATION_CLASS VARCHAR(4),
    CRANE_TYPE VARCHAR(10),
    GMDSS SMALLINT,
    ARPA SMALLINT,
    GPS SMALLINT,
    ECDIS SMALLINT,
    FUEL_TYPE VARCHAR(8),
    LENGHT INTEGER,
    BEAM INTEGER,
    DRAUGHT INTEGER)
AS
begin
  for
    select v.ID, v.NAME, t.name, v.dwt, c.name COMPANY,
      e.name ENGINE, v.ENGINE_KIND, v.HP_MAIN, v.ENGINE_AUX, v.HP_AUX,
      v.GENERATORS, f.flag FLAG, v.OURS, o.name OPERATOR,
      v.CARGO_GEAR, v.LOAD, v.SPEED, v.AUTOMATION_CLASS,
      v.CRANE_TYPE, v.GMDSS, v.ARPA, v.GPS, v.ECDIS,
      v.FUEL_TYPE, v.LENGHT, v.BEAM, v.DRAUGHT
    from crw_vessels v
      left join crw_vessel_types t on (v.vessel_type_id = t.id)
      left join crw_companies c on (v.company_id = c.id)
      left join crw_engines e on (v.engine_id = e.id)
      left join crw_countries f on (v.flag_id = f.id)
      left join crw_operators o on (v.operator_id = o.id)
    where :id_ is null or v.id = :id_
    into :ID, :NAME, VESSEL_TYPE, DWT, COMPANY,
      ENGINE, ENGINE_KIND, HP_MAIN, ENGINE_AUX, HP_AUX,
      GENERATORS, FLAG, OURS, OPERATOR,
      CARGO_GEAR, LOAD, SPEED, AUTOMATION_CLASS,
      CRANE_TYPE, GMDSS, ARPA, GPS, ECDIS,
      FUEL_TYPE, LENGHT, BEAM, DRAUGHT
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE CRW_EV_VESSEL_NEW
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  id = gen_id(crw_gen, 1);
  suspend;
end^


ALTER PROCEDURE CRW_EV_VESSEL_U (
    ACT INTEGER,
    ID INTEGER,
    NAME VARCHAR(50),
    VESSEL_TYPE_ID INTEGER,
    DWT DOUBLE PRECISION,
    COMPANY_ID INTEGER,
    ENGINE_ID INTEGER,
    ENGINE_KIND VARCHAR(15),
    HP_MAIN DOUBLE PRECISION,
    ENGINE_AUX VARCHAR(15),
    HP_AUX DOUBLE PRECISION,
    GENERATORS DOUBLE PRECISION,
    FLAG_ID INTEGER,
    OURS SMALLINT,
    OPERATOR_ID INTEGER,
    CARGO_GEAR VARCHAR(10),
    LOAD DOUBLE PRECISION,
    SPEED DOUBLE PRECISION,
    AUTOMATION_CLASS VARCHAR(4),
    CRANE_TYPE VARCHAR(10),
    GMDSS SMALLINT,
    ARPA SMALLINT,
    GPS SMALLINT,
    ECDIS SMALLINT,
    FUEL_TYPE VARCHAR(8),
    LENGHT INTEGER,
    BEAM INTEGER,
    DRAUGHT INTEGER)
AS
begin
  if (act = 1) then
  begin
    insert into crw_vessels(ID, NAME, VESSEL_TYPE_ID, DWT, COMPANY_ID, ENGINE_ID,
      ENGINE_KIND, HP_MAIN, ENGINE_AUX, HP_AUX, GENERATORS, FLAG_ID, OURS,
      OPERATOR_ID, CARGO_GEAR, LOAD, SPEED, AUTOMATION_CLASS, CRANE_TYPE,
      GMDSS, ARPA, GPS, ECDIS, FUEL_TYPE, LENGHT, BEAM, DRAUGHT)
    values(:ID, :NAME, :VESSEL_TYPE_ID, :DWT, :COMPANY_ID, :ENGINE_ID,
      :ENGINE_KIND, :HP_MAIN, :ENGINE_AUX, :HP_AUX, :GENERATORS, :FLAG_ID, :OURS,
      :OPERATOR_ID, :CARGO_GEAR, :LOAD, :SPEED, :AUTOMATION_CLASS, :CRANE_TYPE,
      :GMDSS, :ARPA, :GPS, :ECDIS, :FUEL_TYPE, :LENGHT, :BEAM, :DRAUGHT);
  end
  else
  begin
    update crw_vessels set
      NAME = :NAME,
      VESSEL_TYPE_ID = :VESSEL_TYPE_ID,
      DWT = :DWT,
      COMPANY_ID = :COMPANY_ID,
      ENGINE_ID = :ENGINE_ID,
      ENGINE_KIND = :ENGINE_KIND,
      HP_MAIN = :HP_MAIN,
      ENGINE_AUX = :ENGINE_AUX,
      HP_AUX = :HP_AUX,
      GENERATORS = :GENERATORS,
      FLAG_ID = :FLAG_ID,
      OURS = :OURS,
      OPERATOR_ID = :OPERATOR_ID,
      CARGO_GEAR = :CARGO_GEAR,
      LOAD = :LOAD,
      SPEED = :SPEED,
      AUTOMATION_CLASS = :AUTOMATION_CLASS,
      CRANE_TYPE = :CRANE_TYPE,
      GMDSS = :GMDSS,
      ARPA = :ARPA,
      GPS = :GPS,
      ECDIS = :ECDIS,
      FUEL_TYPE = :FUEL_TYPE,
      LENGHT = :LENGHT,
      BEAM = :BEAM,
      DRAUGHT = :DRAUGHT
    where id = :id;
  end
end^


ALTER PROCEDURE CRW_EV_VESSELTYPE_DEL (
    ID INTEGER)
AS
begin
  delete from crw_vessel_types where id = :id;
end^


ALTER PROCEDURE CRW_EV_VESSELTYPE_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  select c.ID, c.NAME
  from crw_vessel_types c
  where c.id = :id_
  into :ID, :NAME;
  suspend;
end^


ALTER PROCEDURE CRW_EV_VESSELTYPE_LIST (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  for
    select c.ID, c.NAME
    from crw_vessel_types c
    where c.id = :id_

    union all

    select c.ID, c.NAME
    from crw_vessel_types c
    where :id_ is null
    into :ID, :NAME
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE CRW_EV_VESSELTYPE_NEW
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  id = gen_id(crw_gen, 1);
  suspend;
end^


ALTER PROCEDURE CRW_EV_VESSELTYPE_U (
    ACT INTEGER,
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  if (act = 1) then
  begin
    insert into crw_vessel_types(ID, NAME)
    values(:ID, :NAME);
  end
  else
  begin
    update crw_vessel_types
     set
      NAME = :NAME
    where id = :id;
  end
end^


ALTER PROCEDURE ENTC_EV_UI_LIST
RETURNS (
    URI VARCHAR(50),
    UICLASS VARCHAR(50),
    ENTITYNAME VARCHAR(50),
    VIEWNAME VARCHAR(50),
    TITLE VARCHAR(50),
    GRP VARCHAR(50),
    OPTIONS VARCHAR(1024),
    PARAMS VARCHAR(1024),
    OUTS VARCHAR(1024),
    CATEGORY VARCHAR(50))
AS
begin
  for
    select i.uri, i.uiclass, i.entityname, coalesce(i.viewname, c.viewname),
           i.title, i.grp, i.options, i.params, i.outs, i.category
    from entc_ui i
         left join entc_uiclass c on (i.uiclass = c.uiclass)
         left join entc_grp g on (g.grp = i.grp)
    order by g.idx, i.idx, i.title
    into :uri, :uiclass, :entityname, :viewname, :title, :grp, :options, :params, :outs, :category
  do
    suspend;
end^


ALTER PROCEDURE INF_EV_SETTING_CHECK (
    NAME_ VARCHAR(50),
    USERNAME_ VARCHAR(50))
RETURNS (
    COMMON_EXISTS INTEGER,
    USER_EXISTS INTEGER)
AS
begin
  name_ = upper(name_);
  username_ = upper(coalesce(username_, ''));

  common_exists = 0; user_exists = 0;

  if (exists(select * from  inf_settings s
      where s.name = :name_ and s.usr = :username_)) then
    user_exists = 1;

  if (exists(select * from  inf_settings s
      where s.name = :name_ and s.usr = '')) then
    common_exists = 1;

  suspend;
end^


ALTER PROCEDURE INF_EV_SETTING_GET (
    NAME_ VARCHAR(50),
    USERNAME_ VARCHAR(50))
RETURNS (
    VALI INTEGER,
    VALS VARCHAR(250),
    VALN DOUBLE PRECISION,
    VALD DATE)
AS
begin
  name_ = upper(name_);
  username_ = upper(coalesce(username_, ''));
  select s.vali, s.vals, s.valn, s.vald
  from  inf_settings s
  where s.name = :name_ and s.usr = :username_
  into :vali, :vals, :valn, :vald;

  if (vali is null and vals is null and valn is null and vald is null and username_ <> '') then
    select s.vali, s.vals, s.valn, s.vald
    from  inf_settings s
    where s.name = :name_ and s.usr = ''
    into :vali, :vals, :valn, :vald;

  if (vali is null and vals is null and valn is null and vald is null) then
    select s.def_vali, s.def_vals, s.def_valn, s.def_vald
    from  inf_settings_meta s
    where s.name = :name_
    into :vali, :vals, :valn, :vald;

  suspend;
end^


ALTER PROCEDURE INF_EV_SETTING_SET (
    NAME_ VARCHAR(50),
    USERNAME_ VARCHAR(50),
    VALI_ INTEGER,
    VALS_ VARCHAR(250),
    VALN_ DOUBLE PRECISION,
    VALD_ DATE)
AS
begin
  name_ = upper(name_);
  username_ = upper(coalesce(username_, ''));

  if (vali_ is null and vals_ is null and valn_ is null and vald_ is null) then
    delete from inf_settings s
    where s.name = :name_ and s.usr = :username_;
  else
  begin
    if (exists(select * from inf_settings s where s.name = :name_ and usr = :username_)) then
      update inf_settings s
      set s.vali = :vali_, s.vals = :vals_, s.valn = :valn_, s.vald = :vald_
      where s.name = :name_ and s.usr = :username_;
    else
      insert into inf_settings(name, usr, vali, vals, valn, vald)
      values(:name_, :username_, :vali_, :vals_, :valn_, :vald_);
  end
end^


ALTER PROCEDURE INF_SP_ENUM_GET (
    TABLENAME_ VARCHAR(50),
    FIELDNAME_ VARCHAR(50),
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    CODE VARCHAR(50))
AS
begin
  select e.id, e.name, e.code
  from inf_enum e
  where e.tablename = upper(:tablename_)
        and e.fieldname = upper(:fieldname_)
        and e.id = :id_
  into :id, :name, :code;
  suspend;
end^


ALTER PROCEDURE INF_SP_ENUM_LOOKUP (
    TABLENAME_ VARCHAR(50),
    FIELDNAME_ VARCHAR(50),
    SHOWNONE_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  for
    select e.id, e.name
    from inf_enum e
    where e.tablename = upper(:tablename_)
          and e.fieldname = upper(:fieldname_)
          and e.id = 0 and :shownone_ = 1
    union
    select e.id, e.name
    from inf_enum e
    where e.tablename = upper(:tablename_)
          and e.fieldname = upper(:fieldname_)
          and e.id <> 0
    into :id, :name
  do
    suspend;
end^


ALTER PROCEDURE INF_SP_SETTING (
    NAME_ VARCHAR(50))
RETURNS (
    VALI INTEGER,
    VALS VARCHAR(250),
    VALN DOUBLE PRECISION,
    VALD DATE)
AS
BEGIN
  SUSPEND;
END^


ALTER PROCEDURE INF_SP_SETTING_ (
    NAME_ VARCHAR(50))
RETURNS (
    VALI INTEGER,
    VALS VARCHAR(250),
    VALN DOUBLE PRECISION,
    VALD DATE)
AS
begin
  name_ = upper(name_);

  select s.vali, s.vals, s.valn, s.vald
  from  inf_settings s
  where s.name = :name_ and s.usr = USER
  into :vali, :vals, :valn, :vald;

  if (vali is null and vals is null and valn is null and vald is null) then
    select s.vali, s.vals, s.valn, s.vald
    from  inf_settings s
    where s.name = :name_ and s.usr = ''
    into :vali, :vals, :valn, :vald;

  if (vali is null and vals is null and valn is null and vald is null) then
    select s.def_vali, s.def_vals, s.def_valn, s.def_vald
    from  inf_settings_meta s
    where s.name = :name_
    into :vali, :vals, :valn, :vald;

  suspend;
end^


ALTER PROCEDURE INF_SP_SETTING2 (
    NAME_ VARCHAR(50))
RETURNS (
    VALI INTEGER,
    VALS VARCHAR(250),
    VALN DOUBLE PRECISION,
    VALD DATE)
AS
begin
  name_ = upper(name_);

  select s.vali, s.vals, s.valn, s.vald
  from  inf_settings s
  where s.name = :name_ and s.usr = USER
  into :vali, :vals, :valn, :vald;

  if (vali is null and vals is null and valn is null and vald is null) then
    select s.vali, s.vals, s.valn, s.vald
    from  inf_settings s
    where s.name = :name_ and s.usr = ''
    into :vali, :vals, :valn, :vald;

  if (vali is null and vals is null and valn is null and vald is null) then
    select s.def_vali, s.def_vals, s.def_valn, s.def_vald
    from  inf_settings_meta s
    where s.name = :name_
    into :vali, :vals, :valn, :vald;

  suspend;
end^


ALTER PROCEDURE MSG_SP_BOX_POP (
    FROM_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    SDAT DATE,
    SENDER VARCHAR(38),
    TOPIC VARCHAR(50),
    TXT VARCHAR(250))
AS
declare variable receiver varchar(38);
begin
  receiver = user;
  from_id_ = coalesce(from_id_, 0);

  for
    select m.id, m.idat, coalesce(u.name, m.sender),  m.topic, m.txt
    from msg_boxes m
         left join sec_users u on (u.userid = m.sender)
    where m.receiver = :receiver and m.status = 0 and m.id > :from_id_
    order by m.id
    into :id, :sdat, :sender, :topic, :txt
  do
    suspend;

end^


ALTER PROCEDURE MSG_SP_BOX_PUSH (
    RECEIVER_ VARCHAR(38),
    TOPIC_ VARCHAR(50),
    TXT_ VARCHAR(250))
AS
declare variable id integer;
begin
  receiver_ = upper(receiver_);
  id = gen_id(msg_gen, 1);
  insert into msg_boxes(id, receiver, topic, txt)
  values(:id, :receiver_, :topic_, :txt_);

end^


ALTER PROCEDURE OLD_IMPORT_ALL (
    MODE INTEGER)
AS
declare variable FLAG_ID integer;
declare variable FLAG varchar(4);
declare variable COUNTRY varchar(25);
declare variable id integer;
declare variable code integer;
declare variable post varchar(50);
declare variable post_id integer;
declare variable country_born varchar(50);
declare variable country_born_id integer;
declare variable citizen varchar(50);
declare variable citizen_id integer;
declare variable addr_country varchar(50);
declare variable addr_country_id integer;


declare variable VESSEL_TYPE_ID integer;
declare variable COMPANY_ID integer;
declare variable ENGINE_MAIN_ID integer;
declare variable OPERATOR_ID integer;

declare variable VESSEL_TYPE varchar(50);
declare variable COMPANY varchar(50);
declare variable ENGINE_MAIN varchar(50);
declare variable OPERATOR varchar(50);

begin
/*
ALTER TABLE CRW_EXPER ADD CONSTRAINT FK_CRW_EXPER_EMP FOREIGN KEY (EMP_ID) REFERENCES CRW_EMP (ID);
ALTER TABLE CRW_CHILDS ADD CONSTRAINT FK_CRW_CHILDS_EMP FOREIGN KEY (EMP_ID) REFERENCES CRW_EMP (ID);
*/

  if (mode = 1) then
  begin
    delete from crw_issuers where 1 = 1;
    insert into crw_issuers(id, name)
    select c.id, c.issuer from old_issuers c;
  end

  if (mode = 2) then
  begin
    delete from crw_grades where 1 = 1;
    insert into crw_grades(id, name)
    select c.id, c.grade from old_grade c
    where trim(grade) <> '';
  end

  if (mode = 3) then
  begin
    delete from crw_cert_types where 1 = 1;
    insert into crw_cert_types(ID, NAME, KIND, PERIOD, BRIEF)
    select r.id, r.certificate, e.name, r.period, r.brief
    from old_ref_cert r
      left join inf_enum e on (e.tablename = 'CRW_CERT_TYPES' and e.fieldname = 'KIND' and e.code = r.ctype);
  end

  if (mode = 4) then
  begin
    delete from crw_companies where 1 = 1;
    insert into crw_companies(id, name)
    select id, name from old_company;
  end

  /*
  if (mode = 5) then
  begin
    delete from crw_computers where 1 = 1;
    insert into crw_computers(id, name)
    select id, lvl from old_computer;
  end*/

  --countries
  if (mode = 6) then
  begin
    delete from crw_countries where 1 = 1;
    insert into crw_countries(id, name)
    select id, country from old_countrys;
  end

  if (mode = 7) then
  begin
    delete from crw_vessel_types where 1 = 1;
    insert into crw_vessel_types(id, name)
    select id, type_of_vessel from old_type_ves;
  end

  --engines
  if (mode = 8) then
  begin
    delete from crw_engines where 1 = 1;
    insert into crw_engines(id, name)
    select e.id, e.engine_name
    from old_engine e;
  end

  --operators
  if (mode = 9) then
  begin
    delete from crw_operators where 1 = 1;
    insert into crw_operators(id, name)
    select e.id, e.nameoperator
    from old_operator e;
  end

  --posts
  if (mode = 10) then
  begin
    delete from crw_posts where 1 = 1;
    insert into crw_posts(ID, NAME, FULLNAME, COMMAND, COMMANDJUNIOR)
    select p.id, p.post, p.fullname, coalesce(p.command, 0), coalesce(p.commandjunior, 0) from old_posts p;
  end

  --countries and flags
  if (mode = 11) then
  begin
    delete from crw_countries where 1 = 1;
    insert into crw_countries(id, name, flag)
    select c.id, c.country, substring(country from 1 for 3) from old_countrys c;

    select max(id) from crw_countries into :id;
    id = coalesce(id, 0) + 1;

    for select FLAG, COUNTRY from old_flags
    into FLAG, COUNTRY
    do
      if (exists (select id from crw_countries where name = :country)) then
        update crw_countries set
          flag = :flag
        where name = :COUNTRY;
      else
      begin
        insert into crw_countries(id, name, flag)
        values(:id, :country, :flag);
        id = id + 1;
      end
  end


  --vessels
  if (mode = 12) then
  begin
    delete from crw_vessels where 1 = 1;

    for select id, VESSEL_TYPE, COMPANY, ENGINE_MAIN, OPERATOR, FLAG from old_vessels
    into id, VESSEL_TYPE, COMPANY, ENGINE_MAIN, OPERATOR, FLAG
    do
    begin

      if (trim(VESSEL_TYPE) <> '') then
      begin
        VESSEL_TYPE_ID = null;
        select id from crw_vessel_types where name = :VESSEL_TYPE into :VESSEL_TYPE_ID;
        if (:VESSEL_TYPE_ID is null) then
        begin
          select max(id) + 1 from crw_vessel_types into VESSEL_TYPE_ID;
          insert into crw_vessel_types(ID, NAME)
          values(:VESSEL_TYPE_ID, :VESSEL_TYPE);
        end
      end

      if (trim(COMPANY) <> '') then
      begin
        COMPANY_ID = null;
        select id from crw_companies where name = :COMPANY into :COMPANY_ID;
        if (:COMPANY_ID is null) then
        begin
          select max(id) + 1 from crw_companies into COMPANY_ID;
          insert into crw_companies(ID, NAME)
          values(:COMPANY_ID, :COMPANY);
        end
      end

      if (trim(ENGINE_MAIN) <> '') then
      begin
        ENGINE_MAIN_ID = null;
        select id from crw_engines where name = :ENGINE_MAIN into :ENGINE_MAIN_ID;
        if (:ENGINE_MAIN_ID is null) then
        begin
          select max(id) + 1 from crw_engines into ENGINE_MAIN_ID;
          insert into crw_engines(ID, NAME)
          values(:ENGINE_MAIN_ID, :ENGINE_MAIN);
        end
      end

      if (trim(OPERATOR) <> '') then
      begin
        OPERATOR_ID = null;
        select id from crw_operators where name = :OPERATOR into :OPERATOR_ID;
        if (:OPERATOR_ID is null) then
        begin
          select max(id) + 1 from crw_operators into OPERATOR_ID;
          insert into crw_operators(ID, NAME)
          values(:OPERATOR_ID, :OPERATOR);
        end
      end
  
      if (trim(FLAG) <> '') then
      begin
        FLAG_ID = null;
        select first 1 id from crw_countries where flag = :FLAG into :FLAG_id;
        if (FLAG_ID is null) then
        begin
          select max(id) + 1 from crw_countries into FLAG_ID;
          insert into crw_countries(id, name, flag)
          values(:FLAG_ID, '_' || :FLAG, :FLAG);
        end
      end
  
      insert into crw_vessels(ID, NAME, VESSEL_TYPE_ID, DWT, COMPANY_ID, ENGINE_ID, ENGINE_KIND, HP_MAIN, ENGINE_AUX, HP_AUX, GENERATORS, FLAG_ID, OURS,
        OPERATOR_ID, CARGO_GEAR, LOAD, SPEED, AUTOMATION_CLASS, CRANE_TYPE, GMDSS, ARPA, GPS, ECDIS, FUEL_TYPE, LENGHT, BEAM, DRAUGHT)
      select ID, VESSEL, :VESSEL_TYPE_ID, DWT, :COMPANY_ID, :ENGINE_MAIN_ID, ENGINE_KIND, HP_MAIN, ENGINE_AUX, HP_AUX, GENERATORS, :FLAG_ID, OURS,
        :OPERATOR_ID, CARGO_GEAR, LOAD, SPEED, AUTOMATION_CLASS, CRANE_TYPE, GMDSS, ARPA, GPS, ECDIS, FUEL_TYPE, LENGHT, BEAM, DRAUGHT
      from old_vessels where id = :id;
    end
  end


  if (mode = 13) then
  begin
    delete from crw_emp where 1 = 1;

    for select e.code, e.post, e.country_born, e.citizen, e.address_country
    from old_employee e
    into :code, :POST, :country_born, :citizen, :addr_country
    do
    begin
      if (trim(POST) <> '') then
      begin
        POST_ID = null;
        select id from crw_posts where name = :POST into :POST_ID;
        if (:POST_ID is null) then
        begin
          select max(id) + 1 from crw_posts into POST_ID;
          insert into crw_posts(ID, NAME, FULLNAME, COMMAND, COMMANDJUNIOR)
          values(:POST_ID, :POST, '-', 0, 0);
        end
      end
  
      if (trim(country_born) <> '') then
      begin
        country_born_id = null;
        select first 1 id from crw_countries where name = :country_born into :country_born_id;
        if (country_born_ID is null) then
        begin
          select max(id) + 1 from crw_countries into country_born_ID;
          insert into crw_countries(id, name, flag)
          values(:country_born_ID, :country_born, substring(:country_born from 1 for 3));
        end
      end
  
      if (trim(citizen) <> '') then
      begin
        citizen_ID = null;
        select first 1 id from crw_countries where name = :citizen into :citizen_id;
        if (citizen_ID is null) then
        begin
          select max(id) + 1 from crw_countries into citizen_ID;
          insert into crw_countries(id, name, flag)
          values(:citizen_ID, :citizen, substring(:citizen from 1 for 3));
        end
      end
  
      if (trim(addr_country) <> '') then
      begin
        addr_country_ID = null;
        select first 1 id from crw_countries where name = :addr_country into :addr_country_id;
        if (addr_country_ID is null) then
        begin
          select max(id) + 1 from crw_countries into addr_country_ID;
          insert into crw_countries(id, name, flag)
          values(:addr_country_ID, :addr_country, substring(:addr_country from 1 for 3));
        end
      end
  
      insert into crw_emp(ID, STATUS, POST_ID, SURNAME, NAME, FATHERS_NAME, MOTHERS_NAME, DATE_BORN, COUNTRY_BORN_ID, CITY_BORN, CITIZEN_ID, RELIGION, ADDR_COUNTRY_ID,
        ADDR_CITY, ADDR_STREET, ADDR_NOTE, PHONE, PHOTO, STATUS_D1, STATUS_D2,
        marital, nokin, nokin_name, nokin_addr, nokin_phones,
        color_hair, color_eyes, hight, weight, shoes, education, salary, computer)
      select e.code, 1, :POST_ID, e.surname, e.name, e.fathers_name, e.mothers_name, e.date_born, :country_born_id, e.city_born, :CITIZEN_ID, e.religion, :ADDR_COUNTRY_ID,
        e.address_city, e.address_street, e.address_note, e.phone, e.photo, null, e.date_trip,
        e.marital, e.relative, e.name_relative, e.address_relative, null,
        trim(e.color_hair), trim(e.color_eyes), e.hight, e.weight, e.shoes, e.education, e.pay, e.computer
      from old_employee e
      where e.code = :code;
    end

    update crw_emp set
      color_eyes = 'BROWN'
    where trim(color_eyes) = 'BROUN';
  end

  if (mode = 14) then
  begin
    delete from crw_childs where 1 = 1;

    insert into crw_childs(ID, EMP_ID, SURNAME, NAME, DATE_BORN, SEX)
    select c.id, c.code, c.surname, c.name, c.date_born, c.sex
    from old_children c
    where c.code in (select code from old_employee);
  end
end^


ALTER PROCEDURE OLD_IMPORT_CERTS
AS
declare variable id integer;
declare variable emp_id integer;
declare variable certificate_name varchar(50);
declare variable certificate_name_id integer;
declare variable issuer varchar(50);
declare variable issuer_id integer;
begin
  delete from crw_certs where 1 = 1;

  for select c.id, c.code, c.certificate_name, c.issuer
    from old_certif c
    join crw_emp e on (c.code = e.id)
    where trim(c.certificate_name) <> ''
  into :id, :emp_id, :certificate_name, :issuer
  do
  begin
    if (trim(certificate_name) <> '') then
    begin
      certificate_name_ID = null;
      select id from crw_cert_types where name = :certificate_name into :certificate_name_ID;
      if (:certificate_name_ID is null) then
      begin
        select max(id) + 1 from crw_cert_types into certificate_name_ID;
        insert into crw_cert_types(ID, NAME, KIND, PERIOD, BRIEF)
        values(:certificate_NAME_ID, :certificate_NAME, null, null, '');
      end
    end

    if (trim(issuer) <> '') then
    begin
      issuer_ID = null;
      select id from crw_issuers where name = :issuer into :issuer_ID;
      if (:issuer_ID is null) then
      begin
        select max(id) + 1 from crw_issuers into issuer_ID;
        insert into crw_issuers(ID, NAME)
        values(:issuer_ID, :issuer);
      end
    end

    insert into crw_certs(ID, EMP_ID, CERT_ID, CERT_NUMBER, ISSUER_ID, ISSUED_DATE, EXPIRED_DATE)
    select :id, :emp_id, :certificate_name_id, c.certificate_number, :issuer_ID, c.issue_date, c.expire_date
    from old_certif c
    where c.id = :id;

  end

end^


ALTER PROCEDURE OLD_IMPORT_DOCS
AS
declare variable emp_id integer;
declare variable certificate_grade varchar(50);
declare variable certificate_grade_id integer;
declare variable certificate_issuer varchar(50);
declare variable certificate_issuer_id integer;
declare variable endor_grade varchar(50);
declare variable endor_grade_id integer;
declare variable endor_issuer varchar(50);
declare variable endor_issuer_id integer;
begin
  delete from crw_docs where 1 = 1;

  for select e.id, e.certificate_grade, e.certificate_place, e.endor_grade, e.endor_place
    from old_employee e
  into :emp_id, :certificate_grade, :certificate_issuer, endor_grade, endor_issuer
  do
  begin
    if (trim(certificate_grade) <> '') then
    begin
      certificate_grade_ID = null;
      select id from crw_grades where name = :certificate_grade into :certificate_grade_ID;
      if (:certificate_grade_ID is null) then
      begin
        select max(id) + 1 from crw_grades into certificate_grade_ID;
        insert into crw_grades(ID, NAME)
        values(:certificate_grade_ID, :certificate_grade);
      end
    end

    if (trim(certificate_issuer) <> '') then
    begin
      certificate_issuer_ID = null;
      select id from crw_issuers where name = :certificate_issuer into :certificate_issuer_ID;
      if (:certificate_issuer_ID is null) then
      begin
        select max(id) + 1 from crw_issuers into certificate_issuer_ID;
        insert into crw_issuers(ID, NAME)
        values(:certificate_issuer_ID, :certificate_issuer);
      end
    end

    if (trim(endor_grade) <> '') then
    begin
      endor_grade_ID = null;
      select id from crw_grades where name = :endor_grade into :endor_grade_ID;
      if (:endor_grade_ID is null) then
      begin
        select max(id) + 1 from crw_grades into endor_grade_ID;
        insert into crw_grades(ID, NAME)
        values(:endor_grade_ID, :endor_grade);
      end
    end

    if (trim(endor_issuer) <> '') then
    begin
      endor_issuer_ID = null;
      select id from crw_issuers where name = :endor_issuer into :endor_issuer_ID;
      if (:endor_issuer_ID is null) then
      begin
        select max(id) + 1 from crw_issuers into endor_issuer_ID;
        insert into crw_issuers(ID, NAME)
        values(:endor_issuer_ID, :endor_issuer);
      end
    end

    insert into crw_docs(ID, EMP_ID, NUMBER, GRADE_ID, ISSUER_ID, ISSUED_DATE, ENDOR_ISSUER_ID, ENDOR_ISSUED_DATE, ENDOR_EXPIRED_DATE)
    select gen_id(crw_gen, 1), :emp_id,  e.certificate_number, :certificate_grade_ID, :certificate_issuer_ID, e.certificate_issue, :endor_issuer_ID, e.endor_issue, e.endor_expired
    from old_employee e
    where e.id = :emp_id;

  end

end^


ALTER PROCEDURE OLD_IMPORT_EXPER
AS
declare variable id integer;
declare variable post varchar(50);
declare variable post_id integer;
declare variable vessel_name varchar(50);
declare variable vessel_id integer;
declare variable company_id integer;
declare variable company varchar(50);
begin
  delete from crw_exper where 1 = 1;

  for select e.id, e.post, e.vessel_name, e.company
    from old_exper e
      join crw_emp emp on (e.code = emp.id)
  into :id, :post, :vessel_name, :company
  do
  begin
    if (trim(POST) <> '') then
    begin
      POST_ID = null;
      select id from crw_posts where name = :POST into :POST_ID;
      if (:POST_ID is null) then
      begin
        select max(id) + 1 from crw_posts into POST_ID;
        insert into crw_posts(ID, NAME, FULLNAME, COMMAND, COMMANDJUNIOR)
        values(:POST_ID, :POST, '-', 0, 0);
      end
    end

    if (trim(VESSEL_NAME) <> '') then
    begin
      VESSEL_ID = null;
      select first 1 id from crw_vessels where name = :VESSEL_NAME into :VESSEL_ID;
    end

    if (trim(COMPANY) <> '') then
    begin
      COMPANY_ID = null;
      select id from crw_companies where name = :COMPANY into :COMPANY_ID;
      if (:COMPANY_ID is null) then
      begin
        select max(id) + 1 from crw_companies into COMPANY_ID;
        insert into crw_companies(ID, NAME)
        values(:COMPANY_ID, :COMPANY);
      end
    end


    insert into crw_exper(ID, EMP_ID, POST_ID, VESSEL_ID, VESSEL, COMPANY_ID, FROM_DATE, TO_DATE, NOTE)
    select e.id, e.code, :POST_ID, :VESSEL_ID, e.vessel_name, :COMPANY_ID, e.from_date, e.to_date, e.note
    from old_exper e
    where e.id = :id;
  end

end^


ALTER PROCEDURE SEC_EO_PERM_STATE_GET (
    PERMID VARCHAR(38),
    USERID VARCHAR(38),
    RESID VARCHAR(38))
RETURNS (
    STATE INTEGER)
AS
begin
  resid = coalesce(resid, '');
  select state
  from sec_acl p
  where p.resid = :resid and p.userid = :userid and p.permid = :permid
  into :state;
  state = coalesce(state, 0);
  suspend;
end^


ALTER PROCEDURE SEC_EO_PERM_STATE_SET (
    PERMID VARCHAR(38),
    USERID VARCHAR(38),
    RESID VARCHAR(38),
    STATE INTEGER)
AS
begin
  resid = coalesce(resid, '');

  if (state = 0) then
    delete from sec_acl p
       where p.resid = :resid and p.userid = :userid and p.permid = :permid;
  else
  begin
    if (exists(select * from sec_acl p
              where p.resid = :resid
                    and p.userid = :userid and p.permid = :permid)) then
     update sec_acl p
     set p.state = :state
     where p.resid = :resid and p.userid = :userid and p.permid = :permid;
    else
      insert into sec_acl(resid, userid, permid, state)
      values (:resid, :userid, :permid, :state);
  end
end^


ALTER PROCEDURE SEC_EO_POLICY_RESET (
    POLID_ VARCHAR(38))
AS
begin
  delete from sec_acl a
  where a.permid in (select p.permid from sec_permissions p where p.polid = :polid_);
end^


ALTER PROCEDURE SEC_EO_POLICY_STATE_GET (
    POLID VARCHAR(38))
RETURNS (
    STATE INTEGER)
AS
begin
  select state
  from sec_policies p where p.polid= :polid
  into :state;
  state = coalesce(state, 0);
  suspend;
end^


ALTER PROCEDURE SEC_EO_POLICY_STATE_SET (
    POLID VARCHAR(38),
    STATE INTEGER)
AS
begin
  update sec_policies p
  set p.state = :state
  where p.polid = :polid;
end^


ALTER PROCEDURE SEC_EV_PERM_EFFECTIVE (
    POLID_ VARCHAR(38),
    PERMID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    USERID VARCHAR(38),
    USERNAME VARCHAR(50),
    PERM VARCHAR(50),
    STATE INTEGER,
    INHERITBY_PERM VARCHAR(50),
    INHERITBY_RESID VARCHAR(38))
AS
declare variable permcheck varchar(38);
declare variable permid varchar(38);
declare variable resid varchar(38);
begin
  permid_ = nullif(permid_, '');
  for
    select userid, name
    from sec_users
    into :userid, :username
  do begin
    for
      select p.permid, p.name
      from sec_policies pl left join sec_permissions p  on (pl.polid = p.polid)
      where pl.polid = :polid_
            and ((:permid_ is null) or (:permid_ is not null and p.permid = :permid_))
      into :permcheck, :perm
    do begin
      state = null;
      inheritby_perm = null;
      inheritby_resid = null;
      permid = null;
      resid = null;
      select p.state, p.permid, p.resid
      from sec_ev_perm_effective_(:permcheck, :userid, :resid_) p
      into :state, :permid, :resid;
      if (state is not null) then
      begin
        if (permid <> permcheck) then
          select name from sec_permissions p
          where p.permid = :permid
          into :inheritby_perm;

        if (coalesce(resid, resid_) <> resid_) then
          inheritby_resid = resid;

        suspend;
      end
    end
  end
end^


ALTER PROCEDURE SEC_EV_PERM_EFFECTIVE_ (
    PERMID_ VARCHAR(38),
    USERID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    STATE INTEGER,
    PERMID VARCHAR(38),
    RESID VARCHAR(38))
AS
declare variable inheritby varchar(38);
declare variable parent_resid varchar(38);
declare variable res_parent_sql varchar(1024);
begin
  resid_ = coalesce(resid_, '');
  permid = permid_;
  resid = resid_;

  for
    select a.state
    from sec_acl a
    where a.resid = :resid_ and a.userid = :userid_ and a.permid = :permid_
    into :state
  do
    if (state in (1, 2)) then
    begin
      suspend;
      exit;
    end

  select p.inheritby, pol.res_parent_sql
  from sec_permissions p left join sec_policies pol on (pol.polid = p.polid)
  where p.permid = :permid_
  into :inheritby, :res_parent_sql;

  if (inheritby is null and res_parent_sql is null) then
  begin
    exit;
  end

  parent_resid = '';
  if (coalesce(res_parent_sql, '') <> '') then
  begin
    res_parent_sql = upper(res_parent_sql);
    execute procedure utl_sp_string_replace(:res_parent_sql, ':RESID', :resid_)
    returning_values :res_parent_sql;
    execute statement res_parent_sql into :parent_resid;
    parent_resid = coalesce(parent_resid, '');

    if (parent_resid <> '') then
      inheritby = permid_;

  end

  if (inheritby is not null) then
  begin
    select state, permid, resid from sec_ev_perm_effective_(:inheritby, :userid_, :parent_resid)
    into :state, :permid, :resid;

    if (state in (1, 2)) then
      suspend;
  end
end^


ALTER PROCEDURE SEC_EV_PERM_LIST (
    POLID VARCHAR(38))
RETURNS (
    PERMID VARCHAR(38),
    NAME VARCHAR(50),
    DESCRIPTION VARCHAR(250),
    INHERITBY VARCHAR(50))
AS
begin
  for
    select p.permid, p.name, p.description, pi.name
    from sec_permissions p
         left join sec_permissions pi on (p.inheritby = pi.permid)
    where p.polid = :polid
    into :permid, :name, :description, :inheritby
  do
    suspend;
end^


ALTER PROCEDURE SEC_EV_POLICY_LIST (
    PARENTID VARCHAR(38))
RETURNS (
    POLID VARCHAR(38),
    NAME VARCHAR(50),
    RES_PROVID VARCHAR(38))
AS
begin
  for
    select p.polid, p.name, p.res_provid
    from sec_policies p
    where p.parentid is null and coalesce(:parentid, '') = ''
    union all
    select p.polid, p.name, p.res_provid
    from sec_policies p
    where p.parentid = :parentid and coalesce(:parentid, '') <> ''
    into :polid, :name, :res_provid
  do
    suspend;
end^


ALTER PROCEDURE SEC_SP_PERM_CHECK (
    PERMID_ VARCHAR(38),
    USERID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    STATE INTEGER)
AS
declare variable unrestricted_perm varchar(38) = 'builtin.unrestricted' ;
declare variable pol_state integer;
declare variable roleid varchar(38);
declare variable parent_permid varchar(38);
declare variable parent_resid varchar(38);
declare variable res_parent_sql varchar(1024);
begin
  resid_ = coalesce(resid_, '');

  select a.state
  from sec_acl a
  where a.permid = :unrestricted_perm and a.userid = :userid_ and a.resid = ''
        and a.state = 1
  into :state;

  if (coalesce(state, 0) = 1) then
  begin
    suspend;
    exit;
  end

  select first 1 a.state
  from sec_acl a
       left join sec_user_roles r on (a.userid = r.roleid)
  where a.permid = :unrestricted_perm and r.userid = :userid_ and a.resid = ''
        and a.state = 1
  into :state;

  if (coalesce(state, 0) = 1) then
  begin
    suspend;
    exit;
  end

  select p.inheritby, pol.res_parent_sql, pol.state
  from sec_permissions p left join sec_policies pol on (pol.polid = p.polid)
  where p.permid = :permid_
  into :parent_permid, :res_parent_sql, :pol_state;

  if (pol_state <> 1) then
  begin
    state = 1;
    suspend;
    exit;
  end

  for
    select a.state
    from sec_acl a
    where a.resid = :resid_ and a.userid = :userid_ and a.permid = :permid_
    into :state
  do
    if (state in (1, 2)) then
    begin
      suspend;
      exit;
    end

  for
    select r.roleid
    from sec_user_roles r
    where r.userid = :userid_
    into :roleid
  do begin
    select a.state
    from sec_acl a
    where a.resid = :resid_ and a.userid = :roleid and a.permid = :permid_
    into :state;

    if (state in (1, 2)) then
    begin
      suspend;
      exit;
    end
  end

  if (parent_permid is null and res_parent_sql is null) then
  begin
    state = 0;
    suspend;
    exit;
  end

  parent_resid = '';
  if (coalesce(res_parent_sql, '') <> '') then
  begin
    res_parent_sql = upper(res_parent_sql);
    execute procedure utl_sp_string_replace(:res_parent_sql, ':RESID', :resid_)
    returning_values :res_parent_sql;
    execute statement res_parent_sql into :parent_resid;
    parent_resid = coalesce(parent_resid, '');

    if (parent_resid <> '') then
      parent_permid = permid_;

  end

  if (parent_permid is not null) then
  begin
    select state from sec_sp_perm_check(:parent_permid, :userid_, :parent_resid)
    into :state;
    suspend;
    exit;
  end
  else
  begin
    state = 0;
    suspend;
    exit;
  end
end^


ALTER PROCEDURE SEC_SP_PERM_DEMAND (
    PERMID_ VARCHAR(38),
    RESID_ VARCHAR(38))
AS
BEGIN
  EXIT;
END^


ALTER PROCEDURE SEC_SP_PERM_DEMAND_USERS (
    PERMID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    USERID VARCHAR(38))
AS
declare variable state integer;
begin
  for
    select u.userid
    from sec_users u
    where u.isrole = 0
    into :userid 
  do begin
    select state from sec_sp_perm_check(:permid_, :userid, :resid_)
    into :state;

    if (state = 1) then suspend;
  end
end^


ALTER PROCEDURE SEC_SP_PERM_DEMAND2 (
    PERMID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    STATE INTEGER)
AS
declare variable userid  varchar(38);
begin
  userid = user;
  select state from sec_sp_perm_check(:permid_, :userid, :resid_)
  into :state;
  suspend;
end^


ALTER PROCEDURE UTL_SP_STRING_LEN (
    STRG_IN VARCHAR(32765))
RETURNS (
    STRG_LEN SMALLINT)
AS
    begin
      /*
        get string length
      */

      if (strg_in is null)
        then
          strg_len = null;
        else
          begin
            strg_len = 0;
            while (strg_in || '.'  <> '.')
              do
                begin
                  strg_in = substring( strg_in from 2);
                  strg_len = strg_len + 1;
                end
          end

      suspend;
    end^


ALTER PROCEDURE UTL_SP_STRING_REPLACE (
    STR_IN VARCHAR(1024),
    STR_SEARCH VARCHAR(1024),
    STR_REPLACE VARCHAR(1024))
RETURNS (
    STR_OUT VARCHAR(1024))
AS
BEGIN
  SUSPEND;
END^


ALTER PROCEDURE UTL_SP_STRING_SUB (
    STR_IN VARCHAR(32765),
    STR_BEG SMALLINT,
    STR_LEN SMALLINT)
RETURNS (
    STR_OUT VARCHAR(32765))
AS
declare variable str_chr char( 1);
declare variable str_cpy varchar( 32765);

begin
  /*
     get substring
     strg_beg : 1 ..
  */

  if ((str_in is null)
     or (str_beg is null)
     or (str_beg <= 0)
     or (str_len is null)
     or (str_len <= 0))
  then
    str_out = null;
  else
  begin
    str_cpy = str_in;
    while (1 < str_beg) do
    begin
      str_cpy = substring( str_cpy from 2);
      str_beg = str_beg - 1;
    end

    str_out = '';
    while (0 < str_len) do
    begin
      str_chr = substring( str_cpy from 1 for 1);
      if (str_chr || '.' <> '.') then
      begin
        str_out = str_out || str_chr;
        str_cpy = substring( str_cpy from 2);
        str_len = str_len - 1;
      end
      else
      begin
        str_len = 0;
      end
    end
  end

  suspend;
end^



SET TERM ; ^


/******************************************************************************/
/*                                 Privileges                                 */
/******************************************************************************/


/* Privileges of users */
GRANT SELECT ON RDB$FORMATS TO PUBLIC;
GRANT SELECT ON RDB$PAGES TO PUBLIC;
GRANT SELECT ON RDB$ROLES TO PUBLIC;

/* Privileges of triggers */
GRANT INSERT ON IBE$VERSION_HISTORY TO TRIGGER IBE$VERSION_HISTORY_BI;
